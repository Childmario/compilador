/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes
package compilador;
import java_cup.runtime.Symbol;

//------> Codigo para el parser,variables, metodos
parser code {:
    public String report_error_result="";
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
       // StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                report_error_result += " in line "+(s.left+1) +" ";   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    report_error_result+=", column "+(s.right+1)+" ";
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           thissmethod the message that was passed into thissmethod. */
        report_error_result+=" message: "+message+"\n";
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        //System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        //System.exit(1);
    }
:};

//------> Codigo para las acciones gramaticales


/*--------------- 2da Area: Declaraciones -----------------------*/
//------> declaracion de terminales 
terminal String zvoid,zstring,zclass,zinterface,znull,zthis,zextends;
terminal String zwhile,zif,zelse,zreturn,zbreak,zNew,zNewArray,zdouble;
terminal String id,para,parac,lla,llc,coa,coc,corcetes,llaves;
terminal String paren,punto,coma,pyc,admira,pipes,andpers,negar,zFloat;
terminal String dobleigual,igual,maigual,mayor,meigual,menor,porcentaje;
terminal String slash,aster,guin,mas,zimplements,zfor,zprint,zreadinteger;
terminal String zreadline,zmalloc,zconst_string,zconstante_double,zint;
terminal String zbool, zgetbyte,zsetbyte;
terminal Integer   zconst_int;
terminal Boolen    cbool;

//------> declaracion de no terminales
non terminal Object  InterfaceDecl, Program, Decl, DeclPlus, VariableDecl;
non terminal Object  Variable, FunctionDecl, Formals, VariablePlus, extendsident;
non terminal Object  implementsident, IdentifierPlus, ClassDecl, Field, FieldAst;
non terminal Object  Prototype, StmtBlock, VariableDeclAst, Stmt, StmtAst;
non terminal Object  ExprBool, elseStmt, IfStmt, ExprPlus, WhileStmt, ForStmt;
non terminal Object  ReturnStmt, BreakStmt, PrintStmt, Expr, LValue, Call;
non terminal Object  LibCall, Actuals, Constant, exprPossibilities, DeclPlusBool;
non terminal Object IdentifierPlusBool, VariablePlusBool, ExprPlusBool;
non terminal Object IdentifierBool,RemoveRecursion;
non terminal String     Type;

//----> precedencia de menor a mayor 
precedence left zif, zelse, zfor, zwhile;
precedence left zbreak, zreturn;
precedence left para, parac, coa, coc, lla, llc, paren, corcetes, llaves;
precedence left admira, andpers, pipes, menor, meigual, mayor, maigual, dobleigual, negar, aster, slash, porcentaje, mas, guin;
precedence left id, cbool, zconst_string, zconst_int, zconstante_double, zthis, zNew, zNewArray, znull;
precedence left punto, coma, pyc;
precedence left zgetbyte, zreadinteger, zreadline, zmalloc,zsetbyte;
precedence left zvoid, zclass, zinterface, zextends, zimplements, zprint, igual;
precedence left zbool, zint, zdouble, zstring;

//start with Program;

/*--------------- 3ra Area: Reglas Semanticas -----------------------*/
   
Program::= DeclPlus;

Decl::=   VariableDecl
        | FunctionDecl
        | ClassDecl
        | InterfaceDecl;

DeclPlus::= Decl DeclPlusBool;

DeclPlusBool::= /*nada*/| DeclPlus;

VariableDecl::= Variable pyc;

Variable::= Type id;

Type::= zint|zdouble|zbool|zstring| id | Type corcetes;

FunctionDecl::= Type id para Formals parac StmtBlock
                | zvoid id para Formals parac StmtBlock;

Formals::=   | VariablePlus coma;

VariablePlus::= Variable VariablePlusBool;

VariablePlusBool::= | Variable;

extendsident::= | zextends id;

implementsident::=  | zimplements IdentifierPlus coma; 

IdentifierPlus::= id IdentifierPlusBool;

IdentifierPlusBool::= |IdentifierPlus;

ClassDecl::= zclass id extendsident implementsident lla FieldAst llc;

Field::= VariableDecl Field  
        | FunctionDecl Field;

FieldAst::=  | Field
            | FieldAst Field;

InterfaceDecl::= zinterface id lla Prototype llc;

Prototype::=| Type id para Formals parac pyc Prototype
            | zvoid id para Formals parac pyc Prototype;

StmtBlock::= lla VariableDeclAst StmtAst llc;

VariableDeclAst::= |VariableDecl VariableDeclAst;

Stmt::= Expr pyc | pyc  | IfStmt | WhileStmt | ForStmt | BreakStmt | ReturnStmt | PrintStmt  | StmtBlock ;

StmtAst::= |StmtAst Stmt
           |Stmt;

ExprBool::= |Expr;

elseStmt::= |zelse Stmt;

IfStmt ::= zif para Expr parac elseStmt;

ExprPlus::= Expr ExprPlusBool;

ExprPlusBool::= |ExprPlus;
WhileStmt::= zwhile para Expr parac Stmt;

ForStmt::= zfor para ExprBool pyc Expr pyc ExprBool parac Stmt;

ReturnStmt::= zreturn ExprBool;

BreakStmt::= zbreak pyc;

PrintStmt::= zprint para ExprPlus coma parac pyc;      

Expr::= LValue igual Expr RemoveRecursion | Constant RemoveRecursion | LValue RemoveRecursion |
        zthis RemoveRecursion | Call RemoveRecursion | para Expr parac | admira Expr RemoveRecursion |
        zNew para id parac RemoveRecursion | zNewArray para Expr coma Type parac  RemoveRecursion  |  zreadinteger paren RemoveRecursion |
        zreadline paren RemoveRecursion | zmalloc para Expr parac RemoveRecursion;

RemoveRecursion::=  | exprPossibilities RemoveRecursion | guin Expr RemoveRecursion;

exprPossibilities::= mas Expr
                    | aster Expr
                    | slash Expr
                    | porcentaje Expr
                    | menor Expr
                    | meigual Expr
                    | mayor Expr
                    | maigual Expr
                    | dobleigual Expr
                    | negar Expr
                    | andpers Expr
                    | pipes Expr;

LValue::= id | Expr punto id | Expr coa Expr coc;

Call::= id para Actuals parac | Expr punto id para Actuals parac | Expr punto LibCall para Actuals parac;

LibCall::= zgetbyte para Expr parac  | zsetbyte para Expr coma Expr parac;

Actuals::= | ExprPlus coma;

Constant::= zconst_int | zconstante_double | cbool | zconst_string | znull;