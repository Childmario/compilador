/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes
package compilador;
import java_cup.runtime.Symbol;

//------> Codigo para el parser,variables, metodos
parser code {:
       //Metodo al que se llama automaticamente ante algun error sintactico

    public void syntax_error(Symbol s)
    {        
        String lexema = String.valueOf(s.value);
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);


       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = String.valueOf(s.value);;
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

     
    }
:};

//------> Codigo para las acciones gramaticales


/*--------------- 2da Area: Declaraciones -----------------------*/
//------> declaracion de terminales 
terminal String zvoid,zstring,zclass,zinterface,znull,zthis,zextends;
terminal String zwhile,zif,zelse,zreturn,zbreak,zNew,zNewArray,zdouble;
terminal String id,para,parac,lla,llc,coa,coc,corcetes,llaves;
terminal String paren,punto,coma,pyc,admira,pipes,andpers,negar,zFloat;
terminal String dobleigual,igual,maigual,mayor,meigual,menor,porcentaje;
terminal String slash,aster,guin,mas,zimplements,zfor,zprint,zreadinteger;
terminal String zreadline,zmalloc,zconst_string,zconstante_double,zint;
terminal String zbool, zgetbyte,zsetbyte;
terminal Integer   zconst_int;
terminal Boolen    cbool;

//------> declaracion de no terminales
non terminal Object  InterfaceDecl, Program, Decl, DeclPlus, VariableDecl;
non terminal Object  Variable, FunctionDecl, Formals, VariablePlus, extendsident;
non terminal Object  implementsident, IdentifierPlus, ClassDecl, Field, FieldAst;
non terminal Object  Prototype, StmtBlock, VariableDeclAst, Stmt, StmtAst;
non terminal Object  ExprBool, elseStmt, IfStmt, ExprPlus, WhileStmt, ForStmt;
non terminal Object  ReturnStmt, BreakStmt, PrintStmt, Expr, LValue, Call;
non terminal Object  LibCall, Actuals, Constant, exprPossibilities, DeclPlusBool;
non terminal Object IdentifierPlusBool, VariablePlusBool, ExprPlusBool;
non terminal Object IdentifierBool,RemoveRecursion;
non terminal String     Type;

//----> precedencia de menor a mayor 
precedence left zif, zelse, zfor, zwhile;
precedence left zbreak, zreturn;
precedence left para, parac, coa, coc, lla, llc, paren, corcetes, llaves;
precedence left admira, andpers, pipes, menor, meigual, mayor, maigual, dobleigual, negar, aster, slash, porcentaje, mas, guin;
precedence left id, cbool, zconst_string, zconst_int, zconstante_double, zthis, zNew, zNewArray, znull;
precedence left punto, coma, pyc;
precedence left zgetbyte, zreadinteger, zreadline, zmalloc,zsetbyte;
precedence left zvoid, zclass, zinterface, zextends, zimplements, zprint, igual;
precedence left zbool, zint, zdouble, zstring;

start with Program;

/*--------------- 3ra Area: Reglas Semanticas -----------------------*/
   
Program::= DeclPlus;

Decl::=   VariableDecl
        | FunctionDecl
        | ClassDecl
        | InterfaceDecl;

DeclPlus::= Decl DeclPlusBool;

DeclPlusBool::= /*nada*/| DeclPlus;

VariableDecl::= Variable pyc;

Variable::= Type id;

Type::= zint|zdouble|zbool|zstring| id | Type corcetes;

FunctionDecl::= Type id para Formals parac StmtBlock
                | zvoid id para Formals parac StmtBlock;

Formals::=   | VariablePlus coma;

VariablePlus::= Variable VariablePlusBool;

VariablePlusBool::= | Variable;

extendsident::= | zextends id;

implementsident::=  | zimplements IdentifierPlus coma; 

IdentifierPlus::= id IdentifierPlusBool;

IdentifierPlusBool::= |IdentifierPlus;

ClassDecl::= zclass id extendsident implementsident lla FieldAst llc;

Field::= VariableDecl Field  
        | FunctionDecl Field;

FieldAst::=  | Field
            | FieldAst Field;

InterfaceDecl::= zinterface id lla Prototype llc;

Prototype::=| Type id para Formals parac pyc Prototype
            | zvoid id para Formals parac pyc Prototype;

StmtBlock::= lla VariableDeclAst StmtAst llc;

VariableDeclAst::= |VariableDecl VariableDeclAst;

Stmt::= Expr pyc | pyc  | IfStmt | WhileStmt | ForStmt | BreakStmt | ReturnStmt | PrintStmt  | StmtBlock ;

StmtAst::= |StmtAst Stmt
           |Stmt;

ExprBool::= |Expr;

elseStmt::= |zelse Stmt;

IfStmt ::= zif para Expr parac elseStmt;

ExprPlus::= Expr ExprPlusBool;

ExprPlusBool::= |ExprPlus;
WhileStmt::= zwhile para Expr parac Stmt;

ForStmt::= zfor para ExprBool pyc Expr pyc ExprBool parac Stmt;

ReturnStmt::= zreturn ExprBool;

BreakStmt::= zbreak pyc;

PrintStmt::= zprint para ExprPlus coma parac pyc;      

Expr::= LValue igual Expr RemoveRecursion | Constant RemoveRecursion | LValue RemoveRecursion |
        zthis RemoveRecursion | Call RemoveRecursion | para Expr parac | admira Expr RemoveRecursion |
        zNew para id parac RemoveRecursion | zNewArray para Expr coma Type parac  RemoveRecursion  |  zreadinteger paren RemoveRecursion |
        zreadline paren RemoveRecursion | zmalloc para Expr parac RemoveRecursion;

RemoveRecursion::=  | exprPossibilities RemoveRecursion | guin Expr RemoveRecursion;

exprPossibilities::= mas Expr
                    | aster Expr
                    | slash Expr
                    | porcentaje Expr
                    | menor Expr
                    | meigual Expr
                    | mayor Expr
                    | maigual Expr
                    | dobleigual Expr
                    | negar Expr
                    | andpers Expr
                    | pipes Expr;

LValue::= id | Expr punto id | Expr coa Expr coc;

Call::= id para Actuals parac | Expr punto id para Actuals parac | Expr punto LibCall para Actuals parac;

LibCall::= zgetbyte para Expr parac  | zsetbyte para Expr coma Expr parac;

Actuals::= | ExprPlus coma;

Constant::= zconst_int | zconstante_double | cbool | zconst_string | znull;