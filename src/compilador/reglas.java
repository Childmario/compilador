/* The following code was generated by JFlex 1.6.1 */

package compilador;
import static compilador.Token.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/compilador/reglas.flex</tt>
 */
public class reglas implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  3, 69, 69,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     2, 59, 21,  0,  0, 65, 61, 20, 51, 52, 67,  9, 57, 68, 46, 66, 
     5, 25, 25, 25, 25, 25, 25, 25,  4,  4,  0, 58, 64, 62, 63,  0, 
     0, 44, 49,  7,  7,  8, 47, 48, 10, 30, 10, 10, 32, 33, 43, 10, 
    26, 10, 28, 50, 10, 10, 10, 10,  6, 10, 10, 55, 22, 56,  0, 11, 
     0, 17, 23, 35, 29, 15, 16, 31, 37, 27, 10, 42, 18, 39, 24, 34, 
    40, 10, 13, 19, 12, 14, 36, 41, 38, 45, 10, 53, 60, 54,  0,  0, 
     0,  0,  0,  0,  0, 69,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\1\4\1\5\5\4\1\1"+
    "\13\4\1\6\3\4\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\2\1\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\3\1\27\1\0\10\4"+
    "\1\0\1\30\1\0\4\4\1\31\14\4\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\2\0"+
    "\1\27\1\0\1\3\6\4\1\43\5\4\1\44\7\4"+
    "\1\45\3\4\4\0\1\27\1\0\1\3\1\46\1\47"+
    "\1\4\1\50\3\4\1\51\1\52\7\4\1\53\5\4"+
    "\2\54\1\0\1\42\1\0\1\27\3\4\1\55\1\56"+
    "\6\4\1\57\1\60\1\4\1\61\2\4\1\54\2\27"+
    "\1\62\1\4\1\63\4\4\1\64\1\65\3\4\1\66"+
    "\5\4\1\67\1\70\3\4\1\71\1\72\1\73\2\4"+
    "\1\74\1\4\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\106\0\322\0\u0118\0\u015e\0\106"+
    "\0\u01a4\0\u01ea\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e"+
    "\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be"+
    "\0\u0604\0\106\0\u064a\0\u0690\0\u06d6\0\106\0\106\0\u071c"+
    "\0\106\0\u0762\0\106\0\106\0\106\0\u07a8\0\u07ee\0\u0834"+
    "\0\u087a\0\u08c0\0\u0906\0\106\0\u094c\0\106\0\106\0\u0992"+
    "\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2"+
    "\0\u0c08\0\u0c4e\0\u0302\0\106\0\u0c94\0\u0cda\0\u0d20\0\u0d66"+
    "\0\u0dac\0\u015e\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50"+
    "\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\106\0\106"+
    "\0\106\0\106\0\106\0\106\0\106\0\106\0\u113a\0\u1180"+
    "\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0"+
    "\0\u13f6\0\u143c\0\u015e\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a"+
    "\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca"+
    "\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa"+
    "\0\u1a40\0\u1a40\0\u1a86\0\u015e\0\u015e\0\u1acc\0\u015e\0\u1b12"+
    "\0\u1b58\0\u1b9e\0\u015e\0\u015e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6"+
    "\0\u1cfc\0\u1d42\0\u1d88\0\u015e\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0"+
    "\0\u1ee6\0\u1928\0\u1f2c\0\u1f72\0\106\0\u1fb8\0\u1ffe\0\u2044"+
    "\0\u208a\0\u20d0\0\u015e\0\u015e\0\u2116\0\u215c\0\u21a2\0\u21e8"+
    "\0\u222e\0\u2274\0\u015e\0\u015e\0\u22ba\0\u015e\0\u2300\0\u2346"+
    "\0\u238c\0\u23d2\0\u2418\0\u015e\0\u245e\0\u015e\0\u24a4\0\u24ea"+
    "\0\u2530\0\u2576\0\u015e\0\u015e\0\u25bc\0\u2602\0\u2648\0\u015e"+
    "\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u015e\0\u015e\0\u27ec"+
    "\0\u2832\0\u2878\0\u015e\0\u015e\0\u015e\0\u28be\0\u2904\0\u015e"+
    "\0\u294a\0\u015e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\3\7\1\10\1\7"+
    "\1\2\1\11\1\12\1\7\1\13\1\14\2\7\1\15"+
    "\1\2\1\16\1\2\1\17\1\20\1\5\1\21\1\22"+
    "\1\23\1\24\3\7\1\25\1\7\1\26\1\27\4\7"+
    "\1\30\1\7\1\31\2\7\1\32\1\33\1\34\1\7"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\112\0\1\4\106\0\1\5\1\60"+
    "\23\0\1\5\24\0\1\61\33\0\1\5\1\60\1\62"+
    "\22\0\1\5\14\0\1\62\7\0\1\61\33\0\5\7"+
    "\1\0\12\7\3\0\27\7\1\0\4\7\27\0\5\7"+
    "\1\0\3\7\1\63\6\7\3\0\16\7\1\64\10\7"+
    "\1\0\4\7\27\0\5\7\1\0\5\7\1\65\4\7"+
    "\3\0\27\7\1\0\4\7\27\0\5\7\1\0\10\7"+
    "\1\66\1\7\3\0\17\7\1\67\7\7\1\0\4\7"+
    "\27\0\5\7\1\0\7\7\1\70\2\7\3\0\13\7"+
    "\1\71\13\7\1\0\4\7\27\0\5\7\1\0\2\7"+
    "\1\72\7\7\3\0\27\7\1\0\4\7\23\0\1\73"+
    "\1\0\1\73\1\0\21\73\1\74\1\75\57\73\4\0"+
    "\5\7\1\0\3\7\1\76\6\7\3\0\13\7\1\77"+
    "\13\7\1\0\4\7\27\0\5\7\1\0\4\7\1\100"+
    "\5\7\3\0\27\7\1\0\4\7\27\0\5\7\1\0"+
    "\3\7\1\101\6\7\3\0\27\7\1\0\4\7\27\0"+
    "\5\7\1\0\6\7\1\102\3\7\3\0\1\7\1\103"+
    "\16\7\1\104\6\7\1\0\4\7\27\0\5\7\1\0"+
    "\5\7\1\105\4\7\3\0\27\7\1\0\4\7\27\0"+
    "\5\7\1\0\12\7\3\0\13\7\1\106\13\7\1\0"+
    "\4\7\27\0\5\7\1\0\7\7\1\107\2\7\3\0"+
    "\27\7\1\0\4\7\27\0\5\7\1\0\10\7\1\110"+
    "\1\7\3\0\27\7\1\0\4\7\27\0\5\7\1\0"+
    "\12\7\3\0\13\7\1\111\13\7\1\0\4\7\27\0"+
    "\5\7\1\0\12\7\3\0\16\7\1\112\10\7\1\0"+
    "\4\7\27\0\5\7\1\0\5\7\1\113\4\7\3\0"+
    "\27\7\1\0\4\7\27\0\5\7\1\0\10\7\1\114"+
    "\1\7\3\0\27\7\1\0\4\7\27\0\5\7\1\0"+
    "\5\7\1\115\4\7\3\0\27\7\1\0\4\7\27\0"+
    "\5\7\1\0\5\7\1\116\4\7\3\0\27\7\1\0"+
    "\4\7\111\0\1\117\107\0\1\120\113\0\1\121\103\0"+
    "\1\122\106\0\1\123\106\0\1\124\105\0\1\125\105\0"+
    "\1\126\111\0\1\127\1\130\6\0\1\5\1\60\1\131"+
    "\22\0\1\5\14\0\1\131\7\0\1\61\33\0\1\61"+
    "\1\132\2\0\1\133\6\0\1\133\11\0\1\61\60\0"+
    "\2\134\1\0\2\134\6\0\3\134\5\0\1\134\1\0"+
    "\1\134\3\0\1\134\5\0\1\134\10\0\1\134\2\0"+
    "\1\134\1\0\1\134\30\0\5\7\1\0\4\7\1\135"+
    "\5\7\3\0\27\7\1\0\4\7\27\0\5\7\1\0"+
    "\12\7\3\0\4\7\1\136\22\7\1\0\4\7\27\0"+
    "\5\7\1\0\2\7\1\137\7\7\3\0\27\7\1\0"+
    "\4\7\27\0\5\7\1\0\11\7\1\140\3\0\27\7"+
    "\1\0\4\7\27\0\5\7\1\0\2\7\1\141\7\7"+
    "\3\0\27\7\1\0\4\7\27\0\5\7\1\0\10\7"+
    "\1\142\1\7\3\0\27\7\1\0\4\7\27\0\5\7"+
    "\1\0\3\7\1\143\6\7\3\0\27\7\1\0\4\7"+
    "\27\0\5\7\1\0\3\7\1\144\6\7\3\0\27\7"+
    "\1\0\4\7\30\0\1\73\6\0\2\73\2\0\1\73"+
    "\3\0\6\73\60\0\5\7\1\0\5\7\1\145\4\7"+
    "\3\0\27\7\1\0\4\7\27\0\5\7\1\0\12\7"+
    "\3\0\13\7\1\146\13\7\1\0\4\7\27\0\5\7"+
    "\1\0\10\7\1\147\1\7\3\0\27\7\1\0\4\7"+
    "\27\0\5\7\1\0\12\7\3\0\4\7\1\150\22\7"+
    "\1\0\4\7\27\0\5\7\1\0\2\7\1\151\7\7"+
    "\3\0\27\7\1\0\4\7\27\0\5\7\1\0\12\7"+
    "\3\0\21\7\1\152\5\7\1\0\4\7\27\0\5\7"+
    "\1\0\7\7\1\153\2\7\3\0\27\7\1\0\4\7"+
    "\27\0\5\7\1\0\4\7\1\154\5\7\3\0\27\7"+
    "\1\0\4\7\27\0\5\7\1\0\10\7\1\155\1\7"+
    "\3\0\27\7\1\0\4\7\27\0\5\7\1\0\7\7"+
    "\1\156\2\7\3\0\27\7\1\0\4\7\27\0\5\7"+
    "\1\0\12\7\3\0\4\7\1\157\22\7\1\0\4\7"+
    "\27\0\5\7\1\0\12\7\3\0\4\7\1\160\22\7"+
    "\1\0\4\7\27\0\5\7\1\0\12\7\3\0\22\7"+
    "\1\161\4\7\1\0\4\7\27\0\5\7\1\0\12\7"+
    "\3\0\13\7\1\162\13\7\1\0\4\7\27\0\5\7"+
    "\1\0\2\7\1\163\7\7\3\0\27\7\1\0\4\7"+
    "\27\0\5\7\1\0\2\7\1\164\7\7\3\0\27\7"+
    "\1\0\4\7\23\0\1\127\1\0\1\127\1\0\102\127"+
    "\103\165\1\166\2\165\4\0\2\167\1\0\2\167\6\0"+
    "\3\167\5\0\1\167\1\0\1\167\3\0\1\167\5\0"+
    "\1\167\10\0\1\167\2\0\1\167\1\0\1\167\30\0"+
    "\1\61\1\132\1\170\1\0\1\133\6\0\1\133\11\0"+
    "\1\61\14\0\1\170\43\0\2\171\3\0\1\172\17\0"+
    "\1\171\52\0\1\172\5\0\1\134\1\173\1\0\2\134"+
    "\6\0\3\134\5\0\1\134\1\0\1\134\3\0\1\134"+
    "\5\0\1\134\10\0\1\134\1\0\1\61\1\134\1\0"+
    "\1\134\30\0\5\7\1\0\5\7\1\174\4\7\3\0"+
    "\27\7\1\0\4\7\27\0\5\7\1\0\11\7\1\175"+
    "\3\0\27\7\1\0\4\7\27\0\5\7\1\0\4\7"+
    "\1\176\5\7\3\0\27\7\1\0\4\7\27\0\5\7"+
    "\1\0\5\7\1\177\4\7\3\0\27\7\1\0\4\7"+
    "\27\0\5\7\1\0\5\7\1\200\4\7\3\0\27\7"+
    "\1\0\4\7\27\0\5\7\1\0\11\7\1\135\3\0"+
    "\27\7\1\0\4\7\27\0\5\7\1\0\12\7\3\0"+
    "\4\7\1\201\22\7\1\0\4\7\27\0\5\7\1\0"+
    "\7\7\1\202\2\7\3\0\27\7\1\0\4\7\27\0"+
    "\5\7\1\0\10\7\1\203\1\7\3\0\27\7\1\0"+
    "\4\7\27\0\5\7\1\0\10\7\1\204\1\7\3\0"+
    "\27\7\1\0\4\7\27\0\5\7\1\0\12\7\3\0"+
    "\1\7\1\205\25\7\1\0\4\7\27\0\5\7\1\0"+
    "\5\7\1\206\4\7\3\0\27\7\1\0\4\7\27\0"+
    "\5\7\1\0\10\7\1\207\1\7\3\0\27\7\1\0"+
    "\4\7\27\0\5\7\1\0\12\7\3\0\6\7\1\210"+
    "\20\7\1\0\4\7\27\0\5\7\1\0\12\7\3\0"+
    "\1\211\26\7\1\0\4\7\27\0\5\7\1\0\10\7"+
    "\1\212\1\7\3\0\27\7\1\0\4\7\27\0\5\7"+
    "\1\0\11\7\1\213\3\0\27\7\1\0\4\7\27\0"+
    "\5\7\1\0\12\7\3\0\6\7\1\214\20\7\1\0"+
    "\4\7\27\0\5\7\1\0\10\7\1\215\1\7\3\0"+
    "\27\7\1\0\4\7\27\0\5\7\1\0\12\7\3\0"+
    "\25\7\1\216\1\7\1\0\4\7\27\0\5\7\1\0"+
    "\7\7\1\217\2\7\3\0\27\7\1\0\4\7\27\0"+
    "\5\7\1\0\12\7\3\0\27\7\1\0\2\7\1\220"+
    "\1\7\27\0\5\7\1\0\12\7\3\0\27\7\1\0"+
    "\2\7\1\221\1\7\23\0\102\222\1\165\1\223\2\222"+
    "\102\224\1\225\1\166\2\224\4\0\1\167\1\226\1\0"+
    "\2\167\6\0\3\167\5\0\1\167\1\0\1\167\3\0"+
    "\1\167\5\0\1\167\10\0\1\167\1\0\1\61\1\167"+
    "\1\0\1\167\30\0\2\227\1\0\2\227\6\0\3\227"+
    "\5\0\1\227\1\0\1\227\3\0\1\227\5\0\1\227"+
    "\10\0\1\227\2\0\1\227\1\0\1\227\30\0\2\171"+
    "\23\0\1\171\60\0\1\134\1\173\1\131\2\134\6\0"+
    "\3\134\5\0\1\134\1\0\1\134\3\0\1\134\5\0"+
    "\1\134\2\0\1\131\5\0\1\134\1\0\1\61\1\134"+
    "\1\0\1\134\30\0\5\7\1\0\3\7\1\230\6\7"+
    "\3\0\27\7\1\0\4\7\27\0\5\7\1\0\12\7"+
    "\3\0\1\7\1\231\25\7\1\0\4\7\27\0\5\7"+
    "\1\0\12\7\3\0\1\7\1\232\25\7\1\0\4\7"+
    "\27\0\5\7\1\0\12\7\3\0\23\7\1\233\3\7"+
    "\1\0\4\7\27\0\5\7\1\0\2\7\1\234\7\7"+
    "\3\0\27\7\1\0\4\7\27\0\5\7\1\0\3\7"+
    "\1\235\6\7\3\0\27\7\1\0\4\7\27\0\5\7"+
    "\1\0\5\7\1\236\4\7\3\0\27\7\1\0\4\7"+
    "\27\0\5\7\1\0\12\7\3\0\7\7\1\237\1\7"+
    "\1\240\15\7\1\0\4\7\27\0\5\7\1\0\10\7"+
    "\1\241\1\7\3\0\27\7\1\0\4\7\27\0\5\7"+
    "\1\0\12\7\3\0\13\7\1\242\13\7\1\0\4\7"+
    "\27\0\5\7\1\0\11\7\1\243\3\0\27\7\1\0"+
    "\4\7\27\0\5\7\1\0\5\7\1\244\4\7\3\0"+
    "\27\7\1\0\4\7\27\0\5\7\1\0\3\7\1\245"+
    "\6\7\3\0\27\7\1\0\4\7\27\0\5\7\1\0"+
    "\2\7\1\246\7\7\3\0\27\7\1\0\4\7\27\0"+
    "\5\7\1\0\12\7\3\0\26\7\1\247\1\0\4\7"+
    "\27\0\5\7\1\0\12\7\3\0\26\7\1\250\1\0"+
    "\4\7\23\0\102\251\1\225\1\223\2\251\103\224\1\166"+
    "\2\224\4\0\1\167\1\226\1\131\2\167\6\0\3\167"+
    "\5\0\1\167\1\0\1\167\3\0\1\167\5\0\1\167"+
    "\2\0\1\131\5\0\1\167\1\0\1\61\1\167\1\0"+
    "\1\167\30\0\1\227\1\252\1\0\1\227\1\253\6\0"+
    "\1\253\2\227\5\0\1\227\1\0\1\227\3\0\1\227"+
    "\5\0\1\227\10\0\1\227\2\0\1\227\1\0\1\227"+
    "\30\0\5\7\1\0\12\7\3\0\1\7\1\254\25\7"+
    "\1\0\4\7\27\0\5\7\1\0\12\7\3\0\6\7"+
    "\1\255\20\7\1\0\4\7\27\0\5\7\1\0\12\7"+
    "\3\0\10\7\1\256\16\7\1\0\4\7\27\0\5\7"+
    "\1\0\6\7\1\257\3\7\3\0\27\7\1\0\4\7"+
    "\27\0\5\7\1\0\12\7\3\0\20\7\1\260\6\7"+
    "\1\0\4\7\27\0\5\7\1\0\12\7\3\0\1\7"+
    "\1\261\25\7\1\0\4\7\27\0\5\7\1\0\12\7"+
    "\3\0\4\7\1\262\22\7\1\0\4\7\27\0\5\7"+
    "\1\0\5\7\1\263\4\7\3\0\27\7\1\0\4\7"+
    "\27\0\5\7\1\0\12\7\3\0\14\7\1\264\12\7"+
    "\1\0\4\7\27\0\5\7\1\0\3\7\1\265\6\7"+
    "\3\0\27\7\1\0\4\7\27\0\5\7\1\0\2\7"+
    "\1\266\7\7\3\0\27\7\1\0\4\7\27\0\5\7"+
    "\1\0\2\7\1\267\7\7\3\0\27\7\1\0\4\7"+
    "\23\0\102\251\1\224\1\223\2\251\4\0\1\227\1\252"+
    "\1\170\1\227\1\253\6\0\1\253\2\227\5\0\1\227"+
    "\1\0\1\227\3\0\1\227\5\0\1\227\2\0\1\170"+
    "\5\0\1\227\2\0\1\227\1\0\1\227\30\0\1\227"+
    "\1\252\1\0\1\227\1\253\1\172\5\0\1\253\2\227"+
    "\5\0\1\227\1\0\1\227\3\0\1\227\5\0\1\227"+
    "\10\0\1\227\2\0\1\227\1\0\1\227\22\0\1\172"+
    "\5\0\5\7\1\0\11\7\1\270\3\0\27\7\1\0"+
    "\4\7\27\0\5\7\1\0\7\7\1\271\2\7\3\0"+
    "\27\7\1\0\4\7\27\0\5\7\1\0\5\7\1\272"+
    "\4\7\3\0\27\7\1\0\4\7\27\0\5\7\1\0"+
    "\2\7\1\273\7\7\3\0\27\7\1\0\4\7\27\0"+
    "\5\7\1\0\12\7\3\0\1\7\1\274\25\7\1\0"+
    "\4\7\27\0\5\7\1\0\7\7\1\275\2\7\3\0"+
    "\27\7\1\0\4\7\27\0\5\7\1\0\5\7\1\276"+
    "\4\7\3\0\27\7\1\0\4\7\27\0\5\7\1\0"+
    "\5\7\1\277\4\7\3\0\27\7\1\0\4\7\27\0"+
    "\5\7\1\0\12\7\3\0\14\7\1\300\12\7\1\0"+
    "\4\7\27\0\5\7\1\0\12\7\3\0\1\7\1\301"+
    "\25\7\1\0\4\7\27\0\5\7\1\0\5\7\1\302"+
    "\4\7\3\0\27\7\1\0\4\7\27\0\5\7\1\0"+
    "\5\7\1\303\4\7\3\0\27\7\1\0\4\7\27\0"+
    "\5\7\1\0\12\7\3\0\26\7\1\304\1\0\4\7"+
    "\27\0\5\7\1\0\5\7\1\305\4\7\3\0\27\7"+
    "\1\0\4\7\27\0\5\7\1\0\2\7\1\306\7\7"+
    "\3\0\27\7\1\0\4\7\27\0\5\7\1\0\12\7"+
    "\3\0\10\7\1\307\16\7\1\0\4\7\27\0\5\7"+
    "\1\0\11\7\1\310\3\0\27\7\1\0\4\7\27\0"+
    "\5\7\1\0\5\7\1\311\4\7\3\0\27\7\1\0"+
    "\4\7\27\0\5\7\1\0\3\7\1\312\6\7\3\0"+
    "\27\7\1\0\4\7\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\3\1\1\11\21\1\1\11"+
    "\3\1\2\11\1\1\1\11\1\1\3\11\6\1\1\11"+
    "\1\1\2\11\2\1\1\0\10\1\1\0\1\11\1\0"+
    "\21\1\10\11\1\1\2\0\1\1\1\0\31\1\4\0"+
    "\1\1\1\0\31\1\1\0\1\11\1\0\64\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


   
   private Symbol symhbol(int type){
      return new Symbol(type, yyline, yycolumn);
   }
   private Symbol symbhol(int type, Object value){
       return new Symbol(type, yyline, yycolumn, value);
   }

public String posiciocn(String token){

       String auxiliar = yytext();
int col = auxiliar.length();
boolean truncado = false;
         if (token.compareTo("Id")==0) {
        if (col>31) {
            auxiliar = auxiliar.substring(0, 31);
truncado = true;
        }
    }
col += yycolumn;
if(truncado){
//return "Token: "+ token +" -> " +"<" + auxiliar + "> " +" ***Id truncado*** "+ "Línea: " + yyline + " Columna: " + yycolumn +"-"+col;
return token+","+auxiliar+"*"+","+yyline+","+yycolumn +"-"+col;
}
else{
//return "Token: "+ token +" -> " +"<" + auxiliar + "> " + "Línea: " + yyline + " Columna: " + yycolumn +"-"+col;
return token+","+auxiliar+","+yyline+","+yycolumn +"-"+col;
}
      

}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public reglas(java.io.Reader in) {
      this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("error lexico");
            }
          case 62: break;
          case 2: 
            { 
            }
          case 63: break;
          case 3: 
            { System.out.println("zconst_int"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zconst_int, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 4: 
            { System.out.println("id" +" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.id, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 5: 
            { System.out.println("mas"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.mas, yycolumn, yyline, yytext());
            }
          case 66: break;
          case 6: 
            { System.out.println("punto"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.punto, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 7: 
            { System.out.println("para"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.para, yycolumn, yyline, yytext());
            }
          case 68: break;
          case 8: 
            { System.out.println("parac"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.parac, yycolumn, yyline, yytext());
            }
          case 69: break;
          case 9: 
            { System.out.println("lla"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.lla, yycolumn, yyline, yytext());
            }
          case 70: break;
          case 10: 
            { System.out.println("llc"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.llc, yycolumn, yyline, yytext());
            }
          case 71: break;
          case 11: 
            { System.out.println("coa"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.coa, yycolumn, yyline, yytext());
            }
          case 72: break;
          case 12: 
            { System.out.println("coc"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.coc, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 13: 
            { System.out.println("coma"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.coma, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 14: 
            { System.out.println("pyc"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.pyc, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 15: 
            { System.out.println("admira"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.admira, yycolumn, yyline, yytext());
            }
          case 76: break;
          case 16: 
            { System.out.println("igual"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.igual, yycolumn, yyline, yytext());
            }
          case 77: break;
          case 17: 
            { System.out.println("mayor"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.mayor, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 18: 
            { System.out.println("menor"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.menor, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 19: 
            { System.out.println("porcentaje"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext());return new Symbol(sym.porcentaje, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 20: 
            { System.out.println("slash"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.slash, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 21: 
            { System.out.println("aster"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.aster, yycolumn, yyline, yytext());
            }
          case 82: break;
          case 22: 
            { System.out.println("guin"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.guin, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 23: 
            { System.out.println("zconstante_double"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zconstante_double, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 24: 
            { System.out.println("zconst_string"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zconst_string, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 25: 
            { System.out.println("zif"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zif, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 26: 
            { System.out.println("llaves"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.llaves, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 27: 
            { System.out.println("corcetes"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.corcetes, yycolumn, yyline, yytext());
            }
          case 88: break;
          case 28: 
            { System.out.println("negar"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.negar, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 29: 
            { System.out.println("pipes"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.pipes, yycolumn, yyline, yytext());
            }
          case 90: break;
          case 30: 
            { System.out.println("andpers"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.andpers, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 31: 
            { System.out.println("dobleigual"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.dobleigual, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 32: 
            { System.out.println("maigual"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.maigual, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 33: 
            { System.out.println("meigual"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext());return new Symbol(sym.meigual, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 34: 
            { System.out.println("Comentario");
            }
          case 95: break;
          case 35: 
            { System.out.println("zfor"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zfor, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 36: 
            { System.out.println("zint"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zint, yycolumn, yyline, yytext());
            }
          case 97: break;
          case 37: 
            { System.out.println("zNew"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zNew, yycolumn, yyline, yytext());
            }
          case 98: break;
          case 38: 
            { System.out.println("cbool"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.cbool, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 39: 
            { System.out.println("zthis"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zthis, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 40: 
            { System.out.println("zelse"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zelse, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 41: 
            { System.out.println("zbool"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zbool, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 42: 
            { System.out.println("znull"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.znull, yycolumn, yyline, yytext());
            }
          case 103: break;
          case 43: 
            { System.out.println("zvoid"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zvoid, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 44: 
            { System.out.println("error lexico"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext());
            }
          case 105: break;
          case 45: 
            { System.out.println("zbreak"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext());return new Symbol(sym.zbreak, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 46: 
            { System.out.println("zprint"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zprint, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 47: 
            { System.out.println("zclass"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zclass, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 48: 
            { System.out.println("while"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zwhile, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 49: 
            { System.out.println("zfloat"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zFloat, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 50: 
            { System.out.println("zreturn"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext());return new Symbol(sym.zreturn, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 51: 
            { System.out.println("zstring"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext());return new Symbol(sym.zstring, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 52: 
            { System.out.println("zdouble"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zdouble, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 53: 
            { System.out.println("zmalloc"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zmalloc, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 54: 
            { System.out.println("zextends"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zextends, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 55: 
            { System.out.println("zgetbyte"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol (sym.zgetbyte, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 56: 
            { System.out.println("zsetbyte"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol (sym.zsetbyte, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 57: 
            { System.out.println("zreadline"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zreadline, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 58: 
            { System.out.println("zNewArray"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zNewArray, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 59: 
            { System.out.println("zinterface"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zinterface, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 60: 
            { System.out.println("zimplements"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext());return new Symbol(sym.zimplements, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 61: 
            { System.out.println("zreadinteger"+" Linea: " + yyline + " Columna: " + yycolumn +" Lexema: "+ yytext()); return new Symbol(sym.zreadinteger, yycolumn, yyline, yytext());
            }
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
