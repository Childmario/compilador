
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 15 14:30:59 CST 2018
//----------------------------------------------------

package compilador;

import type.*;
import java.util.*;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 15 14:30:59 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\004\000\002\003\004\000" +
    "\002\004\004\000\002\005\004\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\004\000\002\006\004\000\002\006\004" +
    "\000\002\051\002\000\002\036\010\000\002\007\004\000" +
    "\002\007\002\000\002\045\005\000\002\045\002\000\002" +
    "\052\002\000\002\053\002\000\002\010\013\000\002\032" +
    "\004\000\002\032\002\000\002\033\004\000\002\033\002" +
    "\000\002\034\005\000\002\034\003\000\002\042\004\000" +
    "\002\042\002\000\002\011\003\000\002\011\003\000\002" +
    "\012\007\000\002\043\004\000\002\043\002\000\002\013" +
    "\004\000\002\013\004\000\002\035\007\000\002\054\002" +
    "\000\002\055\002\000\002\014\007\000\002\047\004\000" +
    "\002\047\002\000\002\046\003\000\002\046\003\000\002" +
    "\015\004\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\037\003\000\002\037\002\000" +
    "\002\016\010\000\002\041\004\000\002\041\002\000\002" +
    "\017\007\000\002\020\013\000\002\021\005\000\002\022" +
    "\004\000\002\023\007\000\002\040\005\000\002\040\003" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\004\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\004\000\002\024\006\000\002\024\010\000\002" +
    "\024\005\000\002\024\005\000\002\024\006\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\025\003\000\002\025\005\000\002\025\006\000" +
    "\002\026\006\000\002\026\006\000\002\026\006\000\002" +
    "\044\005\000\002\027\006\000\002\027\010\000\002\030" +
    "\003\000\002\030\002\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\026\002\uffff\003\uffff\004\uffff\005\uffff\006" +
    "\uffff\007\uffff\022\uffff\023\uffff\065\uffff\066\uffff\001\002" +
    "\000\026\002\013\003\021\004\023\005\022\006\017\007" +
    "\015\022\024\023\012\065\020\066\016\001\002\000\006" +
    "\023\330\032\037\001\002\000\026\002\001\003\001\004" +
    "\001\005\001\006\001\007\001\022\001\023\001\065\001" +
    "\066\001\001\002\000\004\035\326\001\002\000\026\002" +
    "\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\022\ufffb" +
    "\023\ufffb\065\ufffb\066\ufffb\001\002\000\026\002\ufffe\003" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\022\ufffe\023\ufffe" +
    "\065\ufffe\066\ufffe\001\002\000\010\023\ufff2\025\ufff2\032" +
    "\ufff2\001\002\000\004\002\000\001\002\000\026\002\ufffc" +
    "\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\022\ufffc\023" +
    "\ufffc\065\ufffc\066\ufffc\001\002\000\004\023\310\001\002" +
    "\000\010\023\ufff4\025\ufff4\032\ufff4\001\002\000\004\023" +
    "\266\001\002\000\010\023\ufff6\025\ufff6\032\ufff6\001\002" +
    "\000\006\027\265\035\264\001\002\000\010\023\ufff3\025" +
    "\ufff3\032\ufff3\001\002\000\004\023\027\001\002\000\010" +
    "\023\ufff5\025\ufff5\032\ufff5\001\002\000\026\002\ufffd\003" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\022\ufffd\023\ufffd" +
    "\065\ufffd\066\ufffd\001\002\000\030\002\uffef\003\uffef\004" +
    "\uffef\005\uffef\006\uffef\007\uffef\022\uffef\023\uffef\027\uffef" +
    "\065\uffef\066\uffef\001\002\000\004\024\uffee\001\002\000" +
    "\004\024\031\001\002\000\016\005\uffe9\022\uffe9\023\uffe9" +
    "\025\uffeb\065\uffe9\066\uffe9\001\002\000\004\025\041\001" +
    "\002\000\014\005\022\022\024\023\012\065\020\066\016" +
    "\001\002\000\006\023\040\032\037\001\002\000\006\025" +
    "\uffec\034\036\001\002\000\014\005\uffea\022\uffea\023\uffea" +
    "\065\uffea\066\uffea\001\002\000\010\023\ufff1\025\ufff1\032" +
    "\ufff1\001\002\000\010\025\ufff7\034\ufff7\035\ufff7\001\002" +
    "\000\004\026\042\001\002\000\072\005\uffd5\010\uffd5\011" +
    "\uffd5\013\uffd5\014\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\026\uffd5\027\uffd5\035\uffd5\036" +
    "\uffd5\053\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5" +
    "\063\uffd5\064\uffd5\065\uffd5\066\uffd5\071\uffd5\072\uffd5\001" +
    "\002\000\030\002\uffed\003\uffed\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\022\uffed\023\uffed\027\uffed\065\uffed\066\uffed\001" +
    "\002\000\072\005\022\010\100\011\071\013\065\014\061" +
    "\016\053\017\057\020\101\021\066\022\024\023\067\024" +
    "\060\026\042\027\uffd1\035\uffc5\036\047\053\055\056\102" +
    "\057\077\060\054\061\046\062\063\063\072\064\106\065" +
    "\020\066\016\071\074\072\107\001\002\000\074\005\uffc9" +
    "\010\uffc9\011\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\026\uffc9" +
    "\027\uffc9\035\uffc9\036\uffc9\053\uffc9\056\uffc9\057\uffc9\060" +
    "\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9" +
    "\071\uffc9\072\uffc9\001\002\000\004\024\262\001\002\000" +
    "\040\010\100\011\071\020\101\021\066\023\116\024\060" +
    "\036\047\053\055\060\054\061\046\062\063\063\072\064" +
    "\106\071\074\072\107\001\002\000\050\025\uffa4\030\uffa4" +
    "\031\uffa4\033\uffa4\034\uffa4\035\uffa4\037\uffa4\040\uffa4\041" +
    "\uffa4\042\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4" +
    "\051\uffa4\052\uffa4\053\uffa4\054\uffa4\001\002\000\074\005" +
    "\uffcb\010\uffcb\011\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\026" +
    "\uffcb\027\uffcb\035\uffcb\036\uffcb\053\uffcb\056\uffcb\057\uffcb" +
    "\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066" +
    "\uffcb\071\uffcb\072\uffcb\001\002\000\074\005\uffc8\010\uffc8" +
    "\011\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\026\uffc8\027\uffc8" +
    "\035\uffc8\036\uffc8\053\uffc8\056\uffc8\057\uffc8\060\uffc8\061" +
    "\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\071\uffc8" +
    "\072\uffc8\001\002\000\042\010\100\011\071\020\101\021" +
    "\066\023\116\024\060\035\uffc5\036\047\053\055\060\054" +
    "\061\046\062\063\063\072\064\106\071\074\072\107\001" +
    "\002\000\004\024\255\001\002\000\040\010\100\011\071" +
    "\020\101\021\066\023\116\024\060\036\047\053\055\060" +
    "\054\061\046\062\063\063\072\064\106\071\074\072\107" +
    "\001\002\000\074\005\uffcc\010\uffcc\011\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\026\uffcc\027\uffcc\035\uffcc\036\uffcc\053" +
    "\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc" +
    "\064\uffcc\065\uffcc\066\uffcc\071\uffcc\072\uffcc\001\002\000" +
    "\004\035\253\001\002\000\040\010\100\011\071\020\101" +
    "\021\066\023\116\024\060\036\047\053\055\060\054\061" +
    "\046\062\063\063\072\064\106\071\074\072\107\001\002" +
    "\000\004\024\242\001\002\000\074\005\uffc7\010\uffc7\011" +
    "\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7\027\uffc7\035" +
    "\uffc7\036\uffc7\053\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7" +
    "\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\071\uffc7\072" +
    "\uffc7\001\002\000\004\024\237\001\002\000\074\005\uffcd" +
    "\010\uffcd\011\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\026\uffcd" +
    "\027\uffcd\035\uffcd\036\uffcd\053\uffcd\056\uffcd\057\uffcd\060" +
    "\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd" +
    "\071\uffcd\072\uffcd\001\002\000\004\024\233\001\002\000" +
    "\004\024\226\001\002\000\052\023\ufff2\024\117\030\uffa0" +
    "\032\ufff2\033\uffa0\035\uffa0\037\uffa0\040\uffa0\041\uffa0\042" +
    "\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0" +
    "\051\uffa0\052\uffa0\053\uffa0\054\uffa0\001\002\000\044\025" +
    "\uffc6\030\134\033\132\035\uffc6\037\125\040\136\041\137" +
    "\042\143\044\140\045\141\046\126\047\133\050\130\051" +
    "\131\052\135\053\127\054\142\001\002\000\050\025\uffa2" +
    "\030\uffa2\031\uffa2\033\uffa2\034\uffa2\035\uffa2\037\uffa2\040" +
    "\uffa2\041\uffa2\042\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2" +
    "\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\001\002\000" +
    "\050\025\uff92\030\uff92\031\uff92\033\uff92\034\uff92\035\uff92" +
    "\037\uff92\040\uff92\041\uff92\042\uff92\044\uff92\045\uff92\046" +
    "\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92" +
    "\001\002\000\052\025\uffa3\030\uffa3\031\uffa3\033\uffa3\034" +
    "\uffa3\035\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\224" +
    "\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052" +
    "\uffa3\053\uffa3\054\uffa3\001\002\000\050\025\uff95\030\uff95" +
    "\031\uff95\033\uff95\034\uff95\035\uff95\037\uff95\040\uff95\041" +
    "\uff95\042\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95" +
    "\051\uff95\052\uff95\053\uff95\054\uff95\001\002\000\072\005" +
    "\uffd0\010\uffd0\011\uffd0\013\uffd0\014\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\026\uffd0\027" +
    "\uffd0\035\uffd0\036\uffd0\053\uffd0\056\uffd0\057\uffd0\060\uffd0" +
    "\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\071" +
    "\uffd0\072\uffd0\001\002\000\004\027\uffd4\001\002\000\004" +
    "\024\216\001\002\000\050\025\uff91\030\uff91\031\uff91\033" +
    "\uff91\034\uff91\035\uff91\037\uff91\040\uff91\041\uff91\042\uff91" +
    "\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\052" +
    "\uff91\053\uff91\054\uff91\001\002\000\004\024\213\001\002" +
    "\000\004\024\114\001\002\000\072\005\uffcf\010\uffcf\011" +
    "\uffcf\013\uffcf\014\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\026\uffcf\027\uffcf\035\uffcf\036" +
    "\uffcf\053\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\064\uffcf\065\uffcf\066\uffcf\071\uffcf\072\uffcf\001" +
    "\002\000\050\025\uffa1\030\uffa1\031\uffa1\033\uffa1\034\uffa1" +
    "\035\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\044\uffa1\045" +
    "\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1" +
    "\054\uffa1\001\002\000\072\005\022\010\100\011\071\013" +
    "\065\014\061\016\053\017\057\020\101\021\066\022\024" +
    "\023\067\024\060\026\042\027\uffd1\035\uffc5\036\047\053" +
    "\055\056\102\057\077\060\054\061\046\062\063\063\072" +
    "\064\106\065\020\066\016\071\074\072\107\001\002\000" +
    "\050\025\uff94\030\uff94\031\uff94\033\uff94\034\uff94\035\uff94" +
    "\037\uff94\040\uff94\041\uff94\042\uff94\044\uff94\045\uff94\046" +
    "\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94" +
    "\001\002\000\050\025\uff93\030\uff93\031\uff93\033\uff93\034" +
    "\uff93\035\uff93\037\uff93\040\uff93\041\uff93\042\uff93\044\uff93" +
    "\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053" +
    "\uff93\054\uff93\001\002\000\074\005\uffca\010\uffca\011\uffca" +
    "\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021" +
    "\uffca\022\uffca\023\uffca\024\uffca\026\uffca\027\uffca\035\uffca" +
    "\036\uffca\053\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062" +
    "\uffca\063\uffca\064\uffca\065\uffca\066\uffca\071\uffca\072\uffca" +
    "\001\002\000\004\035\112\001\002\000\074\005\uffce\010" +
    "\uffce\011\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\026\uffce\027" +
    "\uffce\035\uffce\036\uffce\053\uffce\056\uffce\057\uffce\060\uffce" +
    "\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066\uffce\071" +
    "\uffce\072\uffce\001\002\000\004\027\uffd2\001\002\000\042" +
    "\010\100\011\071\020\101\021\066\023\116\024\060\035" +
    "\uffc5\036\047\053\055\060\054\061\046\062\063\063\072" +
    "\064\106\071\074\072\107\001\002\000\004\035\205\001" +
    "\002\000\054\024\117\025\uffa0\030\uffa0\031\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0" +
    "\052\uffa0\053\uffa0\054\uffa0\001\002\000\042\010\100\011" +
    "\071\020\101\021\066\023\116\024\060\025\uff96\036\047" +
    "\053\055\060\054\061\046\062\063\063\072\064\106\071" +
    "\074\072\107\001\002\000\004\025\204\001\002\000\044" +
    "\025\uffbb\030\134\033\132\034\uffbb\037\125\040\136\041" +
    "\137\042\143\044\140\045\141\046\126\047\133\050\130" +
    "\051\131\052\135\053\127\054\142\001\002\000\006\025" +
    "\uff97\034\123\001\002\000\040\010\100\011\071\020\101" +
    "\021\066\023\116\024\060\036\047\053\055\060\054\061" +
    "\046\062\063\063\072\064\106\071\074\072\107\001\002" +
    "\000\044\025\uffbc\030\134\033\132\034\uffbc\037\125\040" +
    "\136\041\137\042\143\044\140\045\141\046\126\047\133" +
    "\050\130\051\131\052\135\053\127\054\142\001\002\000" +
    "\040\010\100\011\071\020\101\021\066\023\116\024\060" +
    "\036\047\053\055\060\054\061\046\062\063\063\072\064" +
    "\106\071\074\072\107\001\002\000\040\010\100\011\071" +
    "\020\101\021\066\023\116\024\060\036\047\053\055\060" +
    "\054\061\046\062\063\063\072\064\106\071\074\072\107" +
    "\001\002\000\040\010\100\011\071\020\101\021\066\023" +
    "\116\024\060\036\047\053\055\060\054\061\046\062\063" +
    "\063\072\064\106\071\074\072\107\001\002\000\040\010" +
    "\100\011\071\020\101\021\066\023\116\024\060\036\047" +
    "\053\055\060\054\061\046\062\063\063\072\064\106\071" +
    "\074\072\107\001\002\000\040\010\100\011\071\020\101" +
    "\021\066\023\116\024\060\036\047\053\055\060\054\061" +
    "\046\062\063\063\072\064\106\071\074\072\107\001\002" +
    "\000\010\023\161\067\156\070\157\001\002\000\040\010" +
    "\100\011\071\020\101\021\066\023\116\024\060\036\047" +
    "\053\055\060\054\061\046\062\063\063\072\064\106\071" +
    "\074\072\107\001\002\000\040\010\100\011\071\020\101" +
    "\021\066\023\116\024\060\036\047\053\055\060\054\061" +
    "\046\062\063\063\072\064\106\071\074\072\107\001\002" +
    "\000\040\010\100\011\071\020\101\021\066\023\116\024" +
    "\060\036\047\053\055\060\054\061\046\062\063\063\072" +
    "\064\106\071\074\072\107\001\002\000\040\010\100\011" +
    "\071\020\101\021\066\023\116\024\060\036\047\053\055" +
    "\060\054\061\046\062\063\063\072\064\106\071\074\072" +
    "\107\001\002\000\040\010\100\011\071\020\101\021\066" +
    "\023\116\024\060\036\047\053\055\060\054\061\046\062" +
    "\063\063\072\064\106\071\074\072\107\001\002\000\040" +
    "\010\100\011\071\020\101\021\066\023\116\024\060\036" +
    "\047\053\055\060\054\061\046\062\063\063\072\064\106" +
    "\071\074\072\107\001\002\000\040\010\100\011\071\020" +
    "\101\021\066\023\116\024\060\036\047\053\055\060\054" +
    "\061\046\062\063\063\072\064\106\071\074\072\107\001" +
    "\002\000\040\010\100\011\071\020\101\021\066\023\116" +
    "\024\060\036\047\053\055\060\054\061\046\062\063\063" +
    "\072\064\106\071\074\072\107\001\002\000\040\010\100" +
    "\011\071\020\101\021\066\023\116\024\060\036\047\053" +
    "\055\060\054\061\046\062\063\063\072\064\106\071\074" +
    "\072\107\001\002\000\050\025\uffae\030\uffae\031\uffae\033" +
    "\uffae\034\uffae\035\uffae\037\uffae\040\uffae\041\uffae\042\uffae" +
    "\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052" +
    "\uffae\053\uffae\054\uffae\001\002\000\050\025\uffb8\030\uffb8" +
    "\031\uffb8\033\uffb8\034\uffb8\035\uffb8\037\125\040\136\041" +
    "\137\042\143\044\140\045\141\046\126\047\133\050\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\054\uffb8\001\002\000\050\025" +
    "\uffb0\030\uffb0\031\uffb0\033\uffb0\034\uffb0\035\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\001\002" +
    "\000\050\025\uffaf\030\uffaf\031\uffaf\033\uffaf\034\uffaf\035" +
    "\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\044\uffaf\045\uffaf" +
    "\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054" +
    "\uffaf\001\002\000\050\025\uffad\030\uffad\031\uffad\033\uffad" +
    "\034\uffad\035\uffad\037\uffad\040\uffad\041\uffad\042\uffad\044" +
    "\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad" +
    "\053\uffad\054\uffad\001\002\000\050\025\uffac\030\uffac\031" +
    "\uffac\033\uffac\034\uffac\035\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051" +
    "\uffac\052\uffac\053\uffac\054\uffac\001\002\000\050\025\uffb6" +
    "\030\uffb6\031\uffb6\033\uffb6\034\uffb6\035\uffb6\037\125\040" +
    "\136\041\137\042\143\044\140\045\141\046\126\047\133" +
    "\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\001\002\000" +
    "\042\030\134\031\154\033\132\037\125\040\136\041\137" +
    "\042\143\044\140\045\141\046\126\047\133\050\130\051" +
    "\131\052\135\053\127\054\142\001\002\000\052\025\uff9e" +
    "\030\uff9e\031\uff9e\033\uff9e\034\uff9e\035\uff9e\037\uff9e\040" +
    "\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e" +
    "\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\001" +
    "\002\000\050\025\uffb2\030\uffb2\031\uffb2\033\uffb2\034\uffb2" +
    "\035\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\044\uffb2\045" +
    "\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\054\uffb2\001\002\000\004\024\174\001\002\000\004\024" +
    "\167\001\002\000\004\024\162\001\002\000\054\024\162" +
    "\025\uff9f\030\uff9f\031\uff9f\033\uff9f\034\uff9f\035\uff9f\037" +
    "\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f" +
    "\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054" +
    "\uff9f\001\002\000\042\010\100\011\071\020\101\021\066" +
    "\023\116\024\060\025\uff96\036\047\053\055\060\054\061" +
    "\046\062\063\063\072\064\106\071\074\072\107\001\002" +
    "\000\050\025\uff9c\030\uff9c\031\uff9c\033\uff9c\034\uff9c\035" +
    "\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\044\uff9c\045\uff9c" +
    "\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\001\002\000\004\025\165\001\002\000\050\025\uff9a" +
    "\030\uff9a\031\uff9a\033\uff9a\034\uff9a\035\uff9a\037\uff9a\040" +
    "\uff9a\041\uff9a\042\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a" +
    "\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\001\002\000" +
    "\050\025\uff9b\030\uff9b\031\uff9b\033\uff9b\034\uff9b\035\uff9b" +
    "\037\uff9b\040\uff9b\041\uff9b\042\uff9b\044\uff9b\045\uff9b\046" +
    "\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b" +
    "\001\002\000\040\010\100\011\071\020\101\021\066\023" +
    "\116\024\060\036\047\053\055\060\054\061\046\062\063" +
    "\063\072\064\106\071\074\072\107\001\002\000\042\030" +
    "\134\033\132\034\171\037\125\040\136\041\137\042\143" +
    "\044\140\045\141\046\126\047\133\050\130\051\131\052" +
    "\135\053\127\054\142\001\002\000\040\010\100\011\071" +
    "\020\101\021\066\023\116\024\060\036\047\053\055\060" +
    "\054\061\046\062\063\063\072\064\106\071\074\072\107" +
    "\001\002\000\042\025\173\030\134\033\132\037\125\040" +
    "\136\041\137\042\143\044\140\045\141\046\126\047\133" +
    "\050\130\051\131\052\135\053\127\054\142\001\002\000" +
    "\004\024\uff98\001\002\000\040\010\100\011\071\020\101" +
    "\021\066\023\116\024\060\036\047\053\055\060\054\061" +
    "\046\062\063\063\072\064\106\071\074\072\107\001\002" +
    "\000\042\025\176\030\134\033\132\037\125\040\136\041" +
    "\137\042\143\044\140\045\141\046\126\047\133\050\130" +
    "\051\131\052\135\053\127\054\142\001\002\000\004\024" +
    "\uff99\001\002\000\050\025\uffb5\030\uffb5\031\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\037\125\040\136\041\137\042\143\044" +
    "\140\045\141\046\126\047\133\050\uffb5\051\uffb5\052\uffb5" +
    "\053\uffb5\054\uffb5\001\002\000\050\025\uffb4\030\uffb4\031" +
    "\uffb4\033\uffb4\034\uffb4\035\uffb4\037\125\040\136\041\137" +
    "\042\143\044\140\045\141\046\126\047\133\050\uffb4\051" +
    "\uffb4\052\uffb4\053\uffb4\054\uffb4\001\002\000\050\025\uffb7" +
    "\030\uffb7\031\uffb7\033\uffb7\034\uffb7\035\uffb7\037\125\040" +
    "\136\041\137\042\143\044\140\045\141\046\126\047\133" +
    "\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\001\002\000" +
    "\050\025\uffb1\030\uffb1\031\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\037\uffb1\040\uffb1\041\uffb1\042\uffb1\044\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1" +
    "\001\002\000\050\025\uffab\030\uffab\031\uffab\033\uffab\034" +
    "\uffab\035\uffab\037\uffab\040\uffab\041\uffab\042\uffab\044\uffab" +
    "\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053" +
    "\uffab\054\uffab\001\002\000\050\025\uff9d\030\uff9d\031\uff9d" +
    "\033\uff9d\034\uff9d\035\uff9d\037\uff9d\040\uff9d\041\uff9d\042" +
    "\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\001\002\000\040\010\100\011" +
    "\071\020\101\021\066\023\116\024\060\036\047\053\055" +
    "\060\054\061\046\062\063\063\072\064\106\071\074\072" +
    "\107\001\002\000\042\030\134\033\132\035\207\037\125" +
    "\040\136\041\137\042\143\044\140\045\141\046\126\047" +
    "\133\050\130\051\131\052\135\053\127\054\142\001\002" +
    "\000\042\010\100\011\071\020\101\021\066\023\116\024" +
    "\060\025\uffc5\036\047\053\055\060\054\061\046\062\063" +
    "\063\072\064\106\071\074\072\107\001\002\000\004\025" +
    "\211\001\002\000\060\010\100\011\071\013\065\014\061" +
    "\016\053\017\057\020\101\021\066\023\116\024\060\026" +
    "\042\035\uffc5\036\047\053\055\056\102\057\077\060\054" +
    "\061\046\062\063\063\072\064\106\071\074\072\107\001" +
    "\002\000\074\005\uffc0\010\uffc0\011\uffc0\013\uffc0\014\uffc0" +
    "\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\024\uffc0\026\uffc0\027\uffc0\035\uffc0\036\uffc0\053\uffc0" +
    "\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064" +
    "\uffc0\065\uffc0\066\uffc0\071\uffc0\072\uffc0\001\002\000\004" +
    "\023\214\001\002\000\004\025\215\001\002\000\050\025" +
    "\uffa9\030\uffa9\031\uffa9\033\uffa9\034\uffa9\035\uffa9\037\uffa9" +
    "\040\uffa9\041\uffa9\042\uffa9\044\uffa9\045\uffa9\046\uffa9\047" +
    "\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\001\002" +
    "\000\040\010\100\011\071\020\101\021\066\023\116\024" +
    "\060\036\047\053\055\060\054\061\046\062\063\063\072" +
    "\064\106\071\074\072\107\001\002\000\006\025\220\034" +
    "\123\001\002\000\004\035\221\001\002\000\074\005\uffbd" +
    "\010\uffbd\011\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\026\uffbd" +
    "\027\uffbd\035\uffbd\036\uffbd\053\uffbd\056\uffbd\057\uffbd\060" +
    "\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd" +
    "\071\uffbd\072\uffbd\001\002\000\004\027\223\001\002\000" +
    "\106\002\uffd3\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\026\uffd3" +
    "\027\uffd3\035\uffd3\036\uffd3\053\uffd3\056\uffd3\057\uffd3\060" +
    "\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3" +
    "\071\uffd3\072\uffd3\001\002\000\040\010\100\011\071\020" +
    "\101\021\066\023\116\024\060\036\047\053\055\060\054" +
    "\061\046\062\063\063\072\064\106\071\074\072\107\001" +
    "\002\000\050\025\uffba\030\uffba\031\uffba\033\uffba\034\uffba" +
    "\035\uffba\037\uffba\040\uffba\041\uffba\042\uffba\044\uffba\045" +
    "\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba" +
    "\054\uffba\001\002\000\040\010\100\011\071\020\101\021" +
    "\066\023\116\024\060\036\047\053\055\060\054\061\046" +
    "\062\063\063\072\064\106\071\074\072\107\001\002\000" +
    "\042\030\134\033\132\034\230\037\125\040\136\041\137" +
    "\042\143\044\140\045\141\046\126\047\133\050\130\051" +
    "\131\052\135\053\127\054\142\001\002\000\014\005\022" +
    "\022\024\023\012\065\020\066\016\001\002\000\006\025" +
    "\232\032\037\001\002\000\050\025\uffa8\030\uffa8\031\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\037\uffa8\040\uffa8\041\uffa8\042" +
    "\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8" +
    "\052\uffa8\053\uffa8\054\uffa8\001\002\000\040\010\100\011" +
    "\071\020\101\021\066\023\116\024\060\036\047\053\055" +
    "\060\054\061\046\062\063\063\072\064\106\071\074\072" +
    "\107\001\002\000\042\025\235\030\134\033\132\037\125" +
    "\040\136\041\137\042\143\044\140\045\141\046\126\047" +
    "\133\050\130\051\131\052\135\053\127\054\142\001\002" +
    "\000\060\010\100\011\071\013\065\014\061\016\053\017" +
    "\057\020\101\021\066\023\116\024\060\026\042\035\uffc5" +
    "\036\047\053\055\056\102\057\077\060\054\061\046\062" +
    "\063\063\072\064\106\071\074\072\107\001\002\000\074" +
    "\005\uffc1\010\uffc1\011\uffc1\013\uffc1\014\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\026\uffc1\027\uffc1\035\uffc1\036\uffc1\053\uffc1\056\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\066\uffc1\071\uffc1\072\uffc1\001\002\000\040\010\100\011" +
    "\071\020\101\021\066\023\116\024\060\036\047\053\055" +
    "\060\054\061\046\062\063\063\072\064\106\071\074\072" +
    "\107\001\002\000\042\025\241\030\134\033\132\037\125" +
    "\040\136\041\137\042\143\044\140\045\141\046\126\047" +
    "\133\050\130\051\131\052\135\053\127\054\142\001\002" +
    "\000\050\025\uffa5\030\uffa5\031\uffa5\033\uffa5\034\uffa5\035" +
    "\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\044\uffa5\045\uffa5" +
    "\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054" +
    "\uffa5\001\002\000\040\010\100\011\071\020\101\021\066" +
    "\023\116\024\060\036\047\053\055\060\054\061\046\062" +
    "\063\063\072\064\106\071\074\072\107\001\002\000\042" +
    "\025\244\030\134\033\132\037\125\040\136\041\137\042" +
    "\143\044\140\045\141\046\126\047\133\050\130\051\131" +
    "\052\135\053\127\054\142\001\002\000\060\010\100\011" +
    "\071\013\065\014\061\016\053\017\057\020\101\021\066" +
    "\023\116\024\060\026\042\035\uffc5\036\047\053\055\056" +
    "\102\057\077\060\054\061\046\062\063\063\072\064\106" +
    "\071\074\072\107\001\002\000\074\005\uffc2\010\uffc2\011" +
    "\uffc2\013\uffc2\014\uffc2\015\246\016\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2\027\uffc2\035" +
    "\uffc2\036\uffc2\053\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2" +
    "\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\071\uffc2\072" +
    "\uffc2\001\002\000\060\010\100\011\071\013\065\014\061" +
    "\016\053\017\057\020\101\021\066\023\116\024\060\026" +
    "\042\035\uffc5\036\047\053\055\056\102\057\077\060\054" +
    "\061\046\062\063\063\072\064\106\071\074\072\107\001" +
    "\002\000\074\005\uffc4\010\uffc4\011\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\026\uffc4\027\uffc4\035\uffc4\036\uffc4\053\uffc4" +
    "\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064" +
    "\uffc4\065\uffc4\066\uffc4\071\uffc4\072\uffc4\001\002\000\074" +
    "\005\uffc3\010\uffc3\011\uffc3\013\uffc3\014\uffc3\015\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3" +
    "\026\uffc3\027\uffc3\035\uffc3\036\uffc3\053\uffc3\056\uffc3\057" +
    "\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3" +
    "\066\uffc3\071\uffc3\072\uffc3\001\002\000\042\025\252\030" +
    "\134\033\132\037\125\040\136\041\137\042\143\044\140" +
    "\045\141\046\126\047\133\050\130\051\131\052\135\053" +
    "\127\054\142\001\002\000\050\025\uffb9\030\uffb9\031\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\037\uffb9\040\uffb9\041\uffb9\042" +
    "\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\001\002\000\074\005\uffbe\010" +
    "\uffbe\011\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\026\uffbe\027" +
    "\uffbe\035\uffbe\036\uffbe\053\uffbe\056\uffbe\057\uffbe\060\uffbe" +
    "\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\071" +
    "\uffbe\072\uffbe\001\002\000\050\025\uffb3\030\uffb3\031\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\037\125\040\136\041\137\042" +
    "\143\044\140\045\141\046\126\047\133\050\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\054\uffb3\001\002\000\004\025\256\001" +
    "\002\000\050\025\uffa7\030\uffa7\031\uffa7\033\uffa7\034\uffa7" +
    "\035\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\044\uffa7\045" +
    "\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7" +
    "\054\uffa7\001\002\000\004\035\260\001\002\000\074\005" +
    "\uffbf\010\uffbf\011\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\026" +
    "\uffbf\027\uffbf\035\uffbf\036\uffbf\053\uffbf\056\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066" +
    "\uffbf\071\uffbf\072\uffbf\001\002\000\050\025\uffaa\030\uffaa" +
    "\031\uffaa\033\uffaa\034\uffaa\035\uffaa\037\uffaa\040\uffaa\041" +
    "\uffaa\042\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa" +
    "\051\uffaa\052\uffaa\053\uffaa\054\uffaa\001\002\000\004\025" +
    "\263\001\002\000\050\025\uffa6\030\uffa6\031\uffa6\033\uffa6" +
    "\034\uffa6\035\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\044" +
    "\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\054\uffa6\001\002\000\026\002\ufffa\003\ufffa\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\022\ufffa\023\ufffa\065\ufffa" +
    "\066\ufffa\001\002\000\026\002\ufff9\003\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\022\ufff9\023\ufff9\065\ufff9\066\ufff9" +
    "\001\002\000\010\012\uffe8\026\uffe8\055\uffe8\001\002\000" +
    "\010\012\271\026\uffe4\055\uffe4\001\002\000\006\026\uffe2" +
    "\055\274\001\002\000\004\023\272\001\002\000\006\026" +
    "\uffe5\055\uffe5\001\002\000\004\026\301\001\002\000\004" +
    "\023\276\001\002\000\006\026\uffe3\034\277\001\002\000" +
    "\006\026\uffe0\034\uffe0\001\002\000\004\023\300\001\002" +
    "\000\006\026\uffe1\034\uffe1\001\002\000\020\004\uffde\005" +
    "\uffde\022\uffde\023\uffde\027\uffde\065\uffde\066\uffde\001\002" +
    "\000\020\004\023\005\022\022\024\023\012\027\uffe7\065" +
    "\020\066\016\001\002\000\020\004\uffdd\005\uffdd\022\uffdd" +
    "\023\uffdd\027\uffdd\065\uffdd\066\uffdd\001\002\000\004\027" +
    "\307\001\002\000\020\004\uffdf\005\uffdf\022\uffdf\023\uffdf" +
    "\027\uffdf\065\uffdf\066\uffdf\001\002\000\020\004\uffdc\005" +
    "\uffdc\022\uffdc\023\uffdc\027\uffdc\065\uffdc\066\uffdc\001\002" +
    "\000\026\002\uffe6\003\uffe6\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\022\uffe6\023\uffe6\065\uffe6\066\uffe6\001\002\000\004" +
    "\026\311\001\002\000\020\004\uffd9\005\uffd9\022\uffd9\023" +
    "\uffd9\027\uffd9\065\uffd9\066\uffd9\001\002\000\020\004\315" +
    "\005\022\022\024\023\012\027\314\065\020\066\016\001" +
    "\002\000\006\023\320\032\037\001\002\000\026\002\uffdb" +
    "\003\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\022\uffdb\023" +
    "\uffdb\065\uffdb\066\uffdb\001\002\000\004\023\320\001\002" +
    "\000\020\004\uffda\005\uffda\022\uffda\023\uffda\027\uffda\065" +
    "\uffda\066\uffda\001\002\000\020\004\uffd7\005\uffd7\022\uffd7" +
    "\023\uffd7\027\uffd7\065\uffd7\066\uffd7\001\002\000\004\024" +
    "\321\001\002\000\016\005\uffe9\022\uffe9\023\uffe9\025\uffeb" +
    "\065\uffe9\066\uffe9\001\002\000\004\025\323\001\002\000" +
    "\004\035\324\001\002\000\020\004\uffd6\005\uffd6\022\uffd6" +
    "\023\uffd6\027\uffd6\065\uffd6\066\uffd6\001\002\000\020\004" +
    "\uffd8\005\uffd8\022\uffd8\023\uffd8\027\uffd8\065\uffd8\066\uffd8" +
    "\001\002\000\104\002\ufff8\003\ufff8\004\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\013\ufff8\014\ufff8\016\ufff8" +
    "\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\026" +
    "\ufff8\027\ufff8\035\ufff8\036\ufff8\053\ufff8\056\ufff8\057\ufff8" +
    "\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066" +
    "\ufff8\071\ufff8\072\ufff8\001\002\000\030\002\ufff0\003\ufff0" +
    "\004\ufff0\005\ufff0\006\ufff0\007\ufff0\022\ufff0\023\ufff0\027" +
    "\ufff0\065\ufff0\066\ufff0\001\002\000\006\024\uffee\035\ufff7" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\004\002\003\001\001\000\020\003\005\004" +
    "\010\005\006\006\024\010\013\012\007\050\004\001\001" +
    "\000\004\036\326\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\027\001\001\000\002\001\001\000\006\007\031\045" +
    "\032\001\001\000\002\001\001\000\006\005\034\050\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\042" +
    "\001\001\000\004\054\043\001\001\000\002\001\001\000" +
    "\046\004\074\005\006\014\061\015\102\016\063\017\055" +
    "\020\050\021\044\022\107\023\051\024\067\025\072\026" +
    "\103\031\047\037\110\046\104\047\075\050\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\260\025" +
    "\072\026\103\031\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\024\067\025\072\026" +
    "\103\031\047\037\256\001\001\000\002\001\001\000\012" +
    "\024\253\025\072\026\103\031\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\250\025\072\026\103" +
    "\031\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\004\074\005" +
    "\006\014\061\015\102\016\063\017\055\020\050\021\044" +
    "\022\107\023\051\024\067\025\072\026\103\031\047\037" +
    "\110\046\104\047\112\050\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\024\067\025\072" +
    "\026\103\031\047\037\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\024\120\025\072\026\103\030\117" +
    "\031\047\040\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\123\025\072\026\103" +
    "\031\047\001\001\000\002\001\001\000\012\024\202\025" +
    "\072\026\103\031\047\001\001\000\012\024\201\025\072" +
    "\026\103\031\047\001\001\000\012\024\200\025\072\026" +
    "\103\031\047\001\001\000\012\024\177\025\072\026\103" +
    "\031\047\001\001\000\012\024\176\025\072\026\103\031" +
    "\047\001\001\000\004\027\157\001\001\000\012\024\154" +
    "\025\072\026\103\031\047\001\001\000\012\024\152\025" +
    "\072\026\103\031\047\001\001\000\012\024\151\025\072" +
    "\026\103\031\047\001\001\000\012\024\150\025\072\026" +
    "\103\031\047\001\001\000\012\024\147\025\072\026\103" +
    "\031\047\001\001\000\012\024\146\025\072\026\103\031" +
    "\047\001\001\000\012\024\145\025\072\026\103\031\047" +
    "\001\001\000\012\024\144\025\072\026\103\031\047\001" +
    "\001\000\012\024\143\025\072\026\103\031\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\165" +
    "\001\001\000\004\044\162\001\001\000\016\024\120\025" +
    "\072\026\103\030\163\031\047\040\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\167\025\072\026\103\031\047\001\001" +
    "\000\002\001\001\000\012\024\171\025\072\026\103\031" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\024\174\025\072\026\103\031\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\205\025\072\026\103\031\047" +
    "\001\001\000\002\001\001\000\014\024\067\025\072\026" +
    "\103\031\047\037\207\001\001\000\002\001\001\000\034" +
    "\014\061\015\211\016\063\017\055\020\050\021\044\022" +
    "\107\023\051\024\067\025\072\026\103\031\047\037\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\024\120\025\072\026\103" +
    "\031\047\040\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\224\025\072\026\103\031\047\001\001\000" +
    "\002\001\001\000\012\024\226\025\072\026\103\031\047" +
    "\001\001\000\002\001\001\000\004\050\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\233\025\072" +
    "\026\103\031\047\001\001\000\002\001\001\000\034\014" +
    "\061\015\235\016\063\017\055\020\050\021\044\022\107" +
    "\023\051\024\067\025\072\026\103\031\047\037\110\001" +
    "\001\000\002\001\001\000\012\024\237\025\072\026\103" +
    "\031\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\024\242\025\072\026\103\031\047\001\001\000\002" +
    "\001\001\000\034\014\061\015\244\016\063\017\055\020" +
    "\050\021\044\022\107\023\051\024\067\025\072\026\103" +
    "\031\047\037\110\001\001\000\004\041\246\001\001\000" +
    "\034\014\061\015\247\016\063\017\055\020\050\021\044" +
    "\022\107\023\051\024\067\025\072\026\103\031\047\037" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\266\001\001\000\004\032\267\001\001\000\004\033" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\274\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\301\001\001\000\016\004\302\005\006\006\305\011" +
    "\304\050\004\053\303\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\311\001\001\000\006" +
    "\013\315\050\312\001\001\000\004\035\324\001\001\000" +
    "\002\001\001\000\004\035\316\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\321\045" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\027\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	if(first) {	Type.initTypes();
			Env.initFirst();
	}
	if(second) Env.initSecond();

    }


       //Metodo al que se llama automaticamente ante algun error sintactico
static boolean error = false;
public static boolean first = true, second = false;
public static int errors = 0;

    public void syntax_error(Symbol s)
    {        
        String lexema = String.valueOf(s.value);
        int fila = s.right;
        int columna = s.left;
        error = true;
        System.out.println("Se ha encontrado un error sintactico recuperable, leer: ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tLinea: "+fila);
        System.out.println("\t\tColumna: "+columna);


       
        
    }


  public void sem_error(String lexeme, String message) {
	errors++;
     	//System.err.println("Error "+ s.current_lexeme() + " : Semantic error");
      System.err.println("  "+ errors + "==> " + message + ": "+ lexeme + "\n");
  }
    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = String.valueOf(s.value);;
        int fila = s.right;
        int columna = s.left;
        error = true;
        System.out.println("Se ha encontrado un error sintactico irrecuperable, leer: ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tLinea: "+fila);
        System.out.println("\t\tColumna: "+columna);

     
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Constant ::= znull 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Constant ::= zconst_string 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Constant ::= cbool 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Constant ::= zconstante_double 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Constant ::= zconst_int 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Actuals",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Actuals ::= ExprPrint 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Actuals",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LibCall ::= zsetbyte para Expr coma Expr parac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LibCall",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LibCall ::= zgetbyte para Expr parac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LibCall",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CallCont ::= para Actuals parac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CallCont",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Call ::= Expr punto LibCall CallCont 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Call ::= Expr punto id CallCont 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Call ::= id para Actuals parac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LValue ::= Expr coa Expr coc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LValue",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LValue ::= Expr punto id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LValue",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LValue ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LValue",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= Call 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= zthis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= LValue 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= Constant 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= zmalloc para Expr parac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= zreadline para parac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= zreadinteger para parac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= zNewArray para Expr coma Type parac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= zNew para id parac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= admira Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr pipes Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr andpers Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr negar Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr dobleigual Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr maigual Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr mayor Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr meigual Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr menor Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= guin Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr porcentaje Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr slash Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr aster Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr guin Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr mas Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= para Expr parac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= LValue igual Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExprPrint ::= Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExprPrint",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ExprPrint ::= ExprPrint coma Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExprPrint",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PrintStmt ::= zprint para ExprPrint parac pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PrintStmt",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BreakStmt ::= zbreak pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BreakStmt",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ReturnStmt ::= zreturn StmtExpr pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ReturnStmt",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ForStmt ::= zfor para StmtExpr pyc Expr pyc StmtExpr parac Stmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ForStmt",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WhileStmt ::= zwhile para Expr parac Stmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WhileStmt",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ElseIfStmt ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ElseIfStmt",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ElseIfStmt ::= zelse Stmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ElseIfStmt",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IfStmt ::= zif para Expr parac Stmt ElseIfStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IfStmt",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StmtExpr ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtExpr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // StmtExpr ::= Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtExpr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stmt ::= StmtExpr pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // StmtEnd ::= Stmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtEnd",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // StmtEnd ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtEnd",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // StmtCont ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtCont",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // StmtCont ::= StmtEnd StmtCont 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtCont",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // StmtBlock ::= lla NT$3 StmtCont NT$4 llc 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtBlock",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.print(" BLOCK EXIT"); Env.pop();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$3 ::= 
            {
              Object RESULT =null;
System.out.print(" BLOCK ENTRY"); Env.push();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ProtCont ::= id para Formals parac pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ProtCont",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Prototype ::= zvoid ProtCont 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prototype",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Prototype ::= Type ProtCont 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prototype",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // InterfaceProt ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("InterfaceProt",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // InterfaceProt ::= InterfaceProt Prototype 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("InterfaceProt",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // InterfaceDecl ::= zinterface id lla InterfaceProt llc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Field ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Field",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Field ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Field",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassField ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ClassField",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassField ::= ClassField Field 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ClassField",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ImpID ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ImpID",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ImpID ::= ImpID coma id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ImpID",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Imp ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Imp",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Imp ::= zimplements ImpID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Imp",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Ext ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ext",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Ext ::= zextends id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ext",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDecl ::= zclass id NT$1 Ext Imp lla ClassField NT$2 llc 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
 	System.out.println("CLASS EXIT: "+n1);
			if(Sintactico.first) Env.pop();
			if(Sintactico.second) Env.next();
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$1 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
	System.out.println("CLASS ENTRY: "+n1);
			if(Sintactico.first) if (Env.putClass(n1, true)!=0) parser.sem_error(n1,"DUPLICATE CLASS NAME");
 			if(Sintactico.second) { Env.next();
						  Name c = (Env.get(n1)).getOwner();
						  Name.putCurrentClass(c);
			}
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FormalsCont ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FormalsCont",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FormalsCont ::= FormalsCont Variable coma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FormalsCont",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Formals ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Formals",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Formals ::= FormalsCont Variable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Formals",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FuncCont ::= id NT$0 para Formals parac StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		System.out.print(" METHOD EXIT"); Env.pop();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncCont",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$0 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
if(!Env.put(n, null)) {System.out.println("Nombre de metodo ya existe");} else {System.out.print(" METHOD ENTRY: "+n); Env.push();}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FunctionDecl ::= zvoid FuncCont 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FunctionDecl ::= Type FuncCont 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= Type corcetes 
            {
              Type RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= id 
            {
              Type RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= zstring 
            {
              Type RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= zbool 
            {
              Type RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= zdouble 
            {
              Type RESULT =null;
		RESULT = Type.floating();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= zint 
            {
              Type RESULT =null;
		RESULT = Type.integer();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Variable ::= Type id 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                if(!Env.put(n, null)){
                    System.out.println("error semnatico");
                }
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VariableDecl ::= Variable pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VariableDecl",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= error llc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= error pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= ClassDecl 
            {
              Object RESULT =null;
		 Hashtable forwards;
			   if(Sintactico.first) { forwards = Name.ForwardHashtable();
						    int err = forwards.size();
						    if(err > 0) { parser.errors = parser.errors + err;
     						    	     		System.err.println("Error : Semantic error");
      					    	     		System.err.println("  ==> CANNOT FIND CLASSES ("+err+"): "+forwards+"\n");
						    }
			   }
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Program Decl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

