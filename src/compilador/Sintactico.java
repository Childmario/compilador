
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 21 18:21:18 CST 2018
//----------------------------------------------------

package compilador;

import java.util.*;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 21 18:21:18 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\004\000\002\003\004\000" +
    "\002\050\004\000\002\051\004\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\004\000\002\047\003" +
    "\000\002\052\002\000\002\053\002\000\002\034\012\000" +
    "\002\004\004\000\002\004\002\000\002\046\005\000\002" +
    "\046\002\000\002\054\002\000\002\055\002\000\002\005" +
    "\013\000\002\030\004\000\002\030\002\000\002\031\004" +
    "\000\002\031\002\000\002\032\005\000\002\032\003\000" +
    "\002\037\004\000\002\037\002\000\002\006\003\000\002" +
    "\006\003\000\002\007\007\000\002\040\004\000\002\040" +
    "\002\000\002\010\004\000\002\010\004\000\002\033\007" +
    "\000\002\056\002\000\002\057\002\000\002\011\007\000" +
    "\002\043\004\000\002\043\002\000\002\042\003\000\002" +
    "\042\003\000\002\060\002\000\002\012\005\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\035\003\000\002\035\002\000\002\013\010\000\002" +
    "\036\004\000\002\036\002\000\002\014\007\000\002\015" +
    "\013\000\002\061\002\000\002\016\006\000\002\017\004" +
    "\000\002\020\007\000\002\045\005\000\002\045\003\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\004\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\004\000\002\021\006\000\002\021\010\000\002\021" +
    "\005\000\002\021\005\000\002\021\006\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\022\003\000\002\022\003\000\002\023\003\000\002" +
    "\023\005\000\002\023\006\000\002\062\002\000\002\063" +
    "\002\000\002\024\010\000\002\024\006\000\002\024\006" +
    "\000\002\041\005\000\002\025\006\000\002\025\010\000" +
    "\002\026\003\000\002\026\002\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\026\002\uffff\003\uffff\004\uffff\005\uffff\006" +
    "\uffff\007\uffff\022\uffff\023\uffff\065\uffff\066\uffff\001\002" +
    "\000\026\002\014\003\020\004\026\005\015\006\013\007" +
    "\011\022\005\023\016\065\006\066\023\001\002\000\010" +
    "\023\ufff5\025\ufff5\032\ufff5\001\002\000\010\023\ufff6\025" +
    "\ufff6\032\ufff6\001\002\000\026\002\001\003\001\004\001" +
    "\005\001\006\001\007\001\022\001\023\001\065\001\066" +
    "\001\001\002\000\026\002\ufffc\003\ufffc\004\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\022\ufffc\023\ufffc\065\ufffc\066\ufffc\001" +
    "\002\000\004\023\317\001\002\000\006\023\055\032\054" +
    "\001\002\000\004\023\032\001\002\000\004\002\000\001" +
    "\002\000\010\023\ufff3\025\ufff3\032\ufff3\001\002\000\010" +
    "\023\ufff2\025\ufff2\032\ufff2\001\002\000\026\002\ufffb\003" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\022\ufffb\023\ufffb" +
    "\065\ufffb\066\ufffb\001\002\000\006\027\031\035\030\001" +
    "\002\000\004\035\027\001\002\000\026\002\ufffd\003\ufffd" +
    "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\022\ufffd\023\ufffd\065" +
    "\ufffd\066\ufffd\001\002\000\010\023\ufff4\025\ufff4\032\ufff4" +
    "\001\002\000\026\002\ufffe\003\ufffe\004\ufffe\005\ufffe\006" +
    "\ufffe\007\ufffe\022\ufffe\023\ufffe\065\ufffe\066\ufffe\001\002" +
    "\000\030\002\uffef\003\uffef\004\uffef\005\uffef\006\uffef\007" +
    "\uffef\022\uffef\023\uffef\027\uffef\065\uffef\066\uffef\001\002" +
    "\000\010\023\ufff1\025\ufff1\032\ufff1\001\002\000\104\002" +
    "\ufff8\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\013\ufff8\014\ufff8\016\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\026\ufff8\027\ufff8\035\ufff8" +
    "\036\ufff8\053\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062" +
    "\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\072\ufff8\073\ufff8" +
    "\001\002\000\026\002\ufffa\003\ufffa\004\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\022\ufffa\023\ufffa\065\ufffa\066\ufffa\001\002" +
    "\000\026\002\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\022\ufff9\023\ufff9\065\ufff9\066\ufff9\001\002\000\010" +
    "\012\uffe7\026\uffe7\055\uffe7\001\002\000\010\012\035\026" +
    "\uffe3\055\uffe3\001\002\000\006\026\uffe1\055\040\001\002" +
    "\000\004\023\036\001\002\000\006\026\uffe4\055\uffe4\001" +
    "\002\000\004\026\045\001\002\000\004\023\042\001\002" +
    "\000\006\026\uffe2\034\043\001\002\000\006\026\uffdf\034" +
    "\uffdf\001\002\000\004\023\044\001\002\000\006\026\uffe0" +
    "\034\uffe0\001\002\000\020\004\uffdd\005\uffdd\022\uffdd\023" +
    "\uffdd\027\uffdd\065\uffdd\066\uffdd\001\002\000\020\004\026" +
    "\005\015\022\005\023\016\027\uffe6\065\006\066\023\001" +
    "\002\000\020\004\uffdc\005\uffdc\022\uffdc\023\uffdc\027\uffdc" +
    "\065\uffdc\066\uffdc\001\002\000\004\027\053\001\002\000" +
    "\020\004\uffde\005\uffde\022\uffde\023\uffde\027\uffde\065\uffde" +
    "\066\uffde\001\002\000\020\004\uffdb\005\uffdb\022\uffdb\023" +
    "\uffdb\027\uffdb\065\uffdb\066\uffdb\001\002\000\026\002\uffe5" +
    "\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\022\uffe5\023" +
    "\uffe5\065\uffe5\066\uffe5\001\002\000\010\023\ufff0\025\ufff0" +
    "\032\ufff0\001\002\000\006\024\uffee\035\ufff7\001\002\000" +
    "\004\024\057\001\002\000\020\004\uffe8\005\uffe8\022\uffe8" +
    "\023\uffe8\025\uffea\065\uffe8\066\uffe8\001\002\000\004\025" +
    "\uffed\001\002\000\016\004\026\005\015\022\005\023\016" +
    "\065\006\066\023\001\002\000\006\023\065\032\054\001" +
    "\002\000\006\025\uffeb\034\064\001\002\000\016\004\uffe9" +
    "\005\uffe9\022\uffe9\023\uffe9\065\uffe9\066\uffe9\001\002\000" +
    "\010\025\ufff7\034\ufff7\035\ufff7\001\002\000\004\025\067" +
    "\001\002\000\004\026\070\001\002\000\074\004\uffd4\005" +
    "\uffd4\010\uffd4\011\uffd4\013\uffd4\014\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\026\uffd4\027" +
    "\uffd4\035\uffd4\036\uffd4\053\uffd4\056\uffd4\057\uffd4\060\uffd4" +
    "\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\072" +
    "\uffd4\073\uffd4\001\002\000\030\002\uffec\003\uffec\004\uffec" +
    "\005\uffec\006\uffec\007\uffec\022\uffec\023\uffec\027\uffec\065" +
    "\uffec\066\uffec\001\002\000\074\004\026\005\015\010\127" +
    "\011\120\013\113\014\107\016\101\017\105\020\130\021" +
    "\114\022\005\023\115\024\106\026\070\027\uffd0\035\uffc3" +
    "\036\075\053\102\056\131\057\126\060\103\061\074\062" +
    "\111\063\121\064\135\065\006\066\023\072\124\073\136" +
    "\001\002\000\076\004\uffc7\005\uffc7\010\uffc7\011\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7" +
    "\022\uffc7\023\uffc7\024\uffc7\026\uffc7\027\uffc7\035\uffc7\036" +
    "\uffc7\053\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7" +
    "\063\uffc7\064\uffc7\065\uffc7\066\uffc7\072\uffc7\073\uffc7\001" +
    "\002\000\004\024\315\001\002\000\040\010\127\011\120" +
    "\020\130\021\114\023\146\024\106\036\075\053\102\060" +
    "\103\061\074\062\111\063\121\064\135\072\124\073\136" +
    "\001\002\000\050\025\uffa1\030\uffa1\031\uffa1\033\uffa1\034" +
    "\uffa1\035\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\044\uffa1" +
    "\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uff9d\052\uff9d\053" +
    "\uff9d\054\uff9d\001\002\000\076\004\uffc9\005\uffc9\010\uffc9" +
    "\011\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\026\uffc9\027\uffc9" +
    "\035\uffc9\036\uffc9\053\uffc9\056\uffc9\057\uffc9\060\uffc9\061" +
    "\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\072\uffc9" +
    "\073\uffc9\001\002\000\076\004\uffc6\005\uffc6\010\uffc6\011" +
    "\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\024\uffc6\026\uffc6\027\uffc6\035" +
    "\uffc6\036\uffc6\053\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6" +
    "\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\072\uffc6\073" +
    "\uffc6\001\002\000\042\010\127\011\120\020\130\021\114" +
    "\023\146\024\106\035\uffc3\036\075\053\102\060\103\061" +
    "\074\062\111\063\121\064\135\072\124\073\136\001\002" +
    "\000\040\010\127\011\120\020\130\021\114\023\146\024" +
    "\106\036\075\053\102\060\103\061\074\062\111\063\121" +
    "\064\135\072\124\073\136\001\002\000\004\024\306\001" +
    "\002\000\076\004\uffca\005\uffca\010\uffca\011\uffca\013\uffca" +
    "\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\026\uffca\027\uffca\035\uffca\036\uffca" +
    "\053\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063" +
    "\uffca\064\uffca\065\uffca\066\uffca\072\uffca\073\uffca\001\002" +
    "\000\004\035\305\001\002\000\040\010\127\011\120\020" +
    "\130\021\114\023\146\024\106\036\075\053\102\060\103" +
    "\061\074\062\111\063\121\064\135\072\124\073\136\001" +
    "\002\000\004\024\274\001\002\000\076\004\uffc5\005\uffc5" +
    "\010\uffc5\011\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\026\uffc5" +
    "\027\uffc5\035\uffc5\036\uffc5\053\uffc5\056\uffc5\057\uffc5\060" +
    "\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5" +
    "\072\uffc5\073\uffc5\001\002\000\004\024\271\001\002\000" +
    "\076\004\uffcb\005\uffcb\010\uffcb\011\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\026\uffcb\027\uffcb\035\uffcb\036\uffcb\053\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\066\uffcb\072\uffcb\073\uffcb\001\002\000\004" +
    "\024\265\001\002\000\004\024\260\001\002\000\052\023" +
    "\ufff2\024\uff98\030\uff9b\032\ufff2\033\uff9b\035\uff9b\037\uff9b" +
    "\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046" +
    "\uff9b\047\uff9b\050\uff9b\051\uff9c\052\uff9c\053\uff9c\054\uff9c" +
    "\001\002\000\034\025\uffc4\030\163\033\161\035\uffc4\037" +
    "\156\040\164\041\165\042\170\044\166\045\167\046\157" +
    "\047\162\050\160\001\002\000\012\051\252\052\250\053" +
    "\251\054\253\001\002\000\040\025\uff9f\030\uff9f\031\uff9f" +
    "\033\uff9f\034\uff9f\035\uff9f\037\uff9f\040\uff9f\041\uff9f\042" +
    "\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\001\002" +
    "\000\050\025\uff8b\030\uff8b\031\uff8b\033\uff8b\034\uff8b\035" +
    "\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\044\uff8b\045\uff8b" +
    "\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054" +
    "\uff8b\001\002\000\042\025\uffa0\030\uffa0\031\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043" +
    "\246\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\001\002" +
    "\000\074\004\uffcf\005\uffcf\010\uffcf\011\uffcf\013\uffcf\014" +
    "\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\026\uffcf\027\uffcf\035\uffcf\036\uffcf\053\uffcf\056" +
    "\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf" +
    "\065\uffcf\066\uffcf\072\uffcf\073\uffcf\001\002\000\050\025" +
    "\uff8e\030\uff8e\031\uff8e\033\uff8e\034\uff8e\035\uff8e\037\uff8e" +
    "\040\uff8e\041\uff8e\042\uff8e\044\uff8e\045\uff8e\046\uff8e\047" +
    "\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\001\002" +
    "\000\004\027\uffd3\001\002\000\004\024\240\001\002\000" +
    "\050\025\uff8a\030\uff8a\031\uff8a\033\uff8a\034\uff8a\035\uff8a" +
    "\037\uff8a\040\uff8a\041\uff8a\042\uff8a\044\uff8a\045\uff8a\046" +
    "\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a" +
    "\001\002\000\004\024\235\001\002\000\004\024\144\001" +
    "\002\000\074\004\uffce\005\uffce\010\uffce\011\uffce\013\uffce" +
    "\014\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\026\uffce\027\uffce\035\uffce\036\uffce\053\uffce" +
    "\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064" +
    "\uffce\065\uffce\066\uffce\072\uffce\073\uffce\001\002\000\040" +
    "\025\uff9e\030\uff9e\031\uff9e\033\uff9e\034\uff9e\035\uff9e\037" +
    "\uff9e\040\uff9e\041\uff9e\042\uff9e\044\uff9e\045\uff9e\046\uff9e" +
    "\047\uff9e\050\uff9e\001\002\000\074\004\026\005\015\010" +
    "\127\011\120\013\113\014\107\016\101\017\105\020\130" +
    "\021\114\022\005\023\115\024\106\026\070\027\uffd0\035" +
    "\uffc3\036\075\053\102\056\131\057\126\060\103\061\074" +
    "\062\111\063\121\064\135\065\006\066\023\072\124\073" +
    "\136\001\002\000\050\025\uff8d\030\uff8d\031\uff8d\033\uff8d" +
    "\034\uff8d\035\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\044" +
    "\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d" +
    "\053\uff8d\054\uff8d\001\002\000\050\025\uff8c\030\uff8c\031" +
    "\uff8c\033\uff8c\034\uff8c\035\uff8c\037\uff8c\040\uff8c\041\uff8c" +
    "\042\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051" +
    "\uff8c\052\uff8c\053\uff8c\054\uff8c\001\002\000\076\004\uffc8" +
    "\005\uffc8\010\uffc8\011\uffc8\013\uffc8\014\uffc8\015\uffc8\016" +
    "\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8" +
    "\026\uffc8\027\uffc8\035\uffc8\036\uffc8\053\uffc8\056\uffc8\057" +
    "\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8" +
    "\066\uffc8\072\uffc8\073\uffc8\001\002\000\004\035\uffcd\001" +
    "\002\000\004\035\142\001\002\000\076\004\uffcc\005\uffcc" +
    "\010\uffcc\011\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\026\uffcc" +
    "\027\uffcc\035\uffcc\036\uffcc\053\uffcc\056\uffcc\057\uffcc\060" +
    "\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\072\uffcc\073\uffcc\001\002\000\004\027\uffd1\001\002\000" +
    "\042\010\127\011\120\020\130\021\114\023\146\024\106" +
    "\035\uffc3\036\075\053\102\060\103\061\074\062\111\063" +
    "\121\064\135\072\124\073\136\001\002\000\004\035\227" +
    "\001\002\000\054\024\uff98\025\uff9b\030\uff9b\031\uff9b\033" +
    "\uff9b\034\uff9b\035\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b" +
    "\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051" +
    "\uff9c\052\uff9c\053\uff9c\054\uff9c\001\002\000\004\024\150" +
    "\001\002\000\042\010\127\011\120\020\130\021\114\023" +
    "\146\024\106\025\uff8f\036\075\053\102\060\103\061\074" +
    "\062\111\063\121\064\135\072\124\073\136\001\002\000" +
    "\004\025\uff97\001\002\000\034\025\uffb8\030\163\033\161" +
    "\034\uffb8\037\156\040\164\041\165\042\170\044\166\045" +
    "\167\046\157\047\162\050\160\001\002\000\006\025\uff90" +
    "\034\154\001\002\000\040\010\127\011\120\020\130\021" +
    "\114\023\146\024\106\036\075\053\102\060\103\061\074" +
    "\062\111\063\121\064\135\072\124\073\136\001\002\000" +
    "\034\025\uffb9\030\163\033\161\034\uffb9\037\156\040\164" +
    "\041\165\042\170\044\166\045\167\046\157\047\162\050" +
    "\160\001\002\000\040\010\127\011\120\020\130\021\114" +
    "\023\146\024\106\036\075\053\102\060\103\061\074\062" +
    "\111\063\121\064\135\072\124\073\136\001\002\000\040" +
    "\010\127\011\120\020\130\021\114\023\146\024\106\036" +
    "\075\053\102\060\103\061\074\062\111\063\121\064\135" +
    "\072\124\073\136\001\002\000\040\010\127\011\120\020" +
    "\130\021\114\023\146\024\106\036\075\053\102\060\103" +
    "\061\074\062\111\063\121\064\135\072\124\073\136\001" +
    "\002\000\010\023\204\067\201\070\202\001\002\000\040" +
    "\010\127\011\120\020\130\021\114\023\146\024\106\036" +
    "\075\053\102\060\103\061\074\062\111\063\121\064\135" +
    "\072\124\073\136\001\002\000\040\010\127\011\120\020" +
    "\130\021\114\023\146\024\106\036\075\053\102\060\103" +
    "\061\074\062\111\063\121\064\135\072\124\073\136\001" +
    "\002\000\040\010\127\011\120\020\130\021\114\023\146" +
    "\024\106\036\075\053\102\060\103\061\074\062\111\063" +
    "\121\064\135\072\124\073\136\001\002\000\040\010\127" +
    "\011\120\020\130\021\114\023\146\024\106\036\075\053" +
    "\102\060\103\061\074\062\111\063\121\064\135\072\124" +
    "\073\136\001\002\000\040\010\127\011\120\020\130\021" +
    "\114\023\146\024\106\036\075\053\102\060\103\061\074" +
    "\062\111\063\121\064\135\072\124\073\136\001\002\000" +
    "\040\010\127\011\120\020\130\021\114\023\146\024\106" +
    "\036\075\053\102\060\103\061\074\062\111\063\121\064" +
    "\135\072\124\073\136\001\002\000\040\010\127\011\120" +
    "\020\130\021\114\023\146\024\106\036\075\053\102\060" +
    "\103\061\074\062\111\063\121\064\135\072\124\073\136" +
    "\001\002\000\040\025\uffab\030\uffab\031\uffab\033\uffab\034" +
    "\uffab\035\uffab\037\uffab\040\uffab\041\uffab\042\uffab\044\uffab" +
    "\045\uffab\046\uffab\047\uffab\050\uffab\001\002\000\040\025" +
    "\uffad\030\uffad\031\uffad\033\uffad\034\uffad\035\uffad\037\uffad" +
    "\040\uffad\041\uffad\042\uffad\044\uffad\045\uffad\046\uffad\047" +
    "\uffad\050\uffad\001\002\000\040\025\uffac\030\uffac\031\uffac" +
    "\033\uffac\034\uffac\035\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\001\002" +
    "\000\040\025\uffaa\030\uffaa\031\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\044\uffaa\045\uffaa" +
    "\046\uffaa\047\uffaa\050\uffaa\001\002\000\040\025\uffa9\030" +
    "\uffa9\031\uffa9\033\uffa9\034\uffa9\035\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050" +
    "\uffa9\001\002\000\032\030\163\031\177\033\161\037\156" +
    "\040\164\041\165\042\170\044\166\045\167\046\157\047" +
    "\162\050\160\001\002\000\042\025\uff99\030\uff99\031\uff99" +
    "\033\uff99\034\uff99\035\uff99\037\uff99\040\uff99\041\uff99\042" +
    "\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99" +
    "\001\002\000\040\025\uffaf\030\uffaf\031\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\044\uffaf" +
    "\045\uffaf\046\uffaf\047\uffaf\050\uffaf\001\002\000\004\024" +
    "\217\001\002\000\004\024\212\001\002\000\004\024\205" +
    "\001\002\000\044\024\205\025\uff9a\030\uff9a\031\uff9a\033" +
    "\uff9a\034\uff9a\035\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a" +
    "\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\001" +
    "\002\000\042\010\127\011\120\020\130\021\114\023\146" +
    "\024\106\025\uff8f\036\075\053\102\060\103\061\074\062" +
    "\111\063\121\064\135\072\124\073\136\001\002\000\040" +
    "\025\uff95\030\uff95\031\uff95\033\uff95\034\uff95\035\uff95\037" +
    "\uff95\040\uff95\041\uff95\042\uff95\044\uff95\045\uff95\046\uff95" +
    "\047\uff95\050\uff95\001\002\000\004\025\210\001\002\000" +
    "\040\025\uff93\030\uff93\031\uff93\033\uff93\034\uff93\035\uff93" +
    "\037\uff93\040\uff93\041\uff93\042\uff93\044\uff93\045\uff93\046" +
    "\uff93\047\uff93\050\uff93\001\002\000\040\025\uff94\030\uff94" +
    "\031\uff94\033\uff94\034\uff94\035\uff94\037\uff94\040\uff94\041" +
    "\uff94\042\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94" +
    "\001\002\000\040\010\127\011\120\020\130\021\114\023" +
    "\146\024\106\036\075\053\102\060\103\061\074\062\111" +
    "\063\121\064\135\072\124\073\136\001\002\000\032\030" +
    "\163\033\161\034\214\037\156\040\164\041\165\042\170" +
    "\044\166\045\167\046\157\047\162\050\160\001\002\000" +
    "\040\010\127\011\120\020\130\021\114\023\146\024\106" +
    "\036\075\053\102\060\103\061\074\062\111\063\121\064" +
    "\135\072\124\073\136\001\002\000\032\025\216\030\163" +
    "\033\161\037\156\040\164\041\165\042\170\044\166\045" +
    "\167\046\157\047\162\050\160\001\002\000\004\024\uff91" +
    "\001\002\000\040\010\127\011\120\020\130\021\114\023" +
    "\146\024\106\036\075\053\102\060\103\061\074\062\111" +
    "\063\121\064\135\072\124\073\136\001\002\000\032\025" +
    "\221\030\163\033\161\037\156\040\164\041\165\042\170" +
    "\044\166\045\167\046\157\047\162\050\160\001\002\000" +
    "\004\024\uff92\001\002\000\040\025\uffb1\030\uffb1\031\uffb1" +
    "\033\uffb1\034\uffb1\035\uffb1\037\156\040\164\041\165\042" +
    "\170\044\166\045\167\046\157\047\162\050\uffb1\001\002" +
    "\000\040\025\uffae\030\uffae\031\uffae\033\uffae\034\uffae\035" +
    "\uffae\037\uffae\040\uffae\041\uffae\042\uffae\044\uffae\045\uffae" +
    "\046\uffae\047\uffae\050\uffae\001\002\000\040\025\uffa8\030" +
    "\uffa8\031\uffa8\033\uffa8\034\uffa8\035\uffa8\037\uffa8\040\uffa8" +
    "\041\uffa8\042\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050" +
    "\uffa8\001\002\000\004\025\226\001\002\000\040\025\uff96" +
    "\030\uff96\031\uff96\033\uff96\034\uff96\035\uff96\037\uff96\040" +
    "\uff96\041\uff96\042\uff96\044\uff96\045\uff96\046\uff96\047\uff96" +
    "\050\uff96\001\002\000\040\010\127\011\120\020\130\021" +
    "\114\023\146\024\106\036\075\053\102\060\103\061\074" +
    "\062\111\063\121\064\135\072\124\073\136\001\002\000" +
    "\032\030\163\033\161\035\231\037\156\040\164\041\165" +
    "\042\170\044\166\045\167\046\157\047\162\050\160\001" +
    "\002\000\042\010\127\011\120\020\130\021\114\023\146" +
    "\024\106\025\uffc3\036\075\053\102\060\103\061\074\062" +
    "\111\063\121\064\135\072\124\073\136\001\002\000\004" +
    "\025\233\001\002\000\060\010\127\011\120\013\113\014" +
    "\107\016\101\017\105\020\130\021\114\023\146\024\106" +
    "\026\070\035\uffc3\036\075\053\102\056\131\057\126\060" +
    "\103\061\074\062\111\063\121\064\135\072\124\073\136" +
    "\001\002\000\076\004\uffbe\005\uffbe\010\uffbe\011\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\024\uffbe\026\uffbe\027\uffbe\035\uffbe\036" +
    "\uffbe\053\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe" +
    "\063\uffbe\064\uffbe\065\uffbe\066\uffbe\072\uffbe\073\uffbe\001" +
    "\002\000\004\023\236\001\002\000\004\025\237\001\002" +
    "\000\040\025\uffa6\030\uffa6\031\uffa6\033\uffa6\034\uffa6\035" +
    "\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\047\uffa6\050\uffa6\001\002\000\040\010\127\011" +
    "\120\020\130\021\114\023\146\024\106\036\075\053\102" +
    "\060\103\061\074\062\111\063\121\064\135\072\124\073" +
    "\136\001\002\000\006\025\242\034\154\001\002\000\004" +
    "\035\243\001\002\000\076\004\uffba\005\uffba\010\uffba\011" +
    "\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba" +
    "\021\uffba\022\uffba\023\uffba\024\uffba\026\uffba\027\uffba\035" +
    "\uffba\036\uffba\053\uffba\056\uffba\057\uffba\060\uffba\061\uffba" +
    "\062\uffba\063\uffba\064\uffba\065\uffba\066\uffba\072\uffba\073" +
    "\uffba\001\002\000\004\027\245\001\002\000\106\002\uffd2" +
    "\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011" +
    "\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\021\uffd2\022\uffd2\023\uffd2\024\uffd2\026\uffd2\027\uffd2\035" +
    "\uffd2\036\uffd2\053\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\072\uffd2\073" +
    "\uffd2\001\002\000\040\010\127\011\120\020\130\021\114" +
    "\023\146\024\106\036\075\053\102\060\103\061\074\062" +
    "\111\063\121\064\135\072\124\073\136\001\002\000\040" +
    "\025\uffb7\030\uffb7\031\uffb7\033\uffb7\034\uffb7\035\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\042\uffb7\044\uffb7\045\uffb7\046\uffb7" +
    "\047\uffb7\050\uffb7\001\002\000\040\010\127\011\120\020" +
    "\130\021\114\023\146\024\106\036\075\053\102\060\103" +
    "\061\074\062\111\063\121\064\135\072\124\073\136\001" +
    "\002\000\040\010\127\011\120\020\130\021\114\023\146" +
    "\024\106\036\075\053\102\060\103\061\074\062\111\063" +
    "\121\064\135\072\124\073\136\001\002\000\040\010\127" +
    "\011\120\020\130\021\114\023\146\024\106\036\075\053" +
    "\102\060\103\061\074\062\111\063\121\064\135\072\124" +
    "\073\136\001\002\000\040\010\127\011\120\020\130\021" +
    "\114\023\146\024\106\036\075\053\102\060\103\061\074" +
    "\062\111\063\121\064\135\072\124\073\136\001\002\000" +
    "\040\025\uffb5\030\uffb5\031\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\037\156\040\164\041\165\042\170\044\166\045\167\046" +
    "\157\047\162\050\uffb5\001\002\000\040\025\uffb2\030\uffb2" +
    "\031\uffb2\033\uffb2\034\uffb2\035\uffb2\037\156\040\164\041" +
    "\165\042\170\044\166\045\167\046\157\047\162\050\uffb2" +
    "\001\002\000\040\025\uffb4\030\uffb4\031\uffb4\033\uffb4\034" +
    "\uffb4\035\uffb4\037\156\040\164\041\165\042\170\044\166" +
    "\045\167\046\157\047\162\050\uffb4\001\002\000\040\025" +
    "\uffb3\030\uffb3\031\uffb3\033\uffb3\034\uffb3\035\uffb3\037\156" +
    "\040\164\041\165\042\170\044\166\045\167\046\157\047" +
    "\162\050\uffb3\001\002\000\040\010\127\011\120\020\130" +
    "\021\114\023\146\024\106\036\075\053\102\060\103\061" +
    "\074\062\111\063\121\064\135\072\124\073\136\001\002" +
    "\000\032\030\163\033\161\034\262\037\156\040\164\041" +
    "\165\042\170\044\166\045\167\046\157\047\162\050\160" +
    "\001\002\000\016\004\026\005\015\022\005\023\016\065" +
    "\006\066\023\001\002\000\006\025\264\032\054\001\002" +
    "\000\040\025\uffa5\030\uffa5\031\uffa5\033\uffa5\034\uffa5\035" +
    "\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\044\uffa5\045\uffa5" +
    "\046\uffa5\047\uffa5\050\uffa5\001\002\000\040\010\127\011" +
    "\120\020\130\021\114\023\146\024\106\036\075\053\102" +
    "\060\103\061\074\062\111\063\121\064\135\072\124\073" +
    "\136\001\002\000\032\025\267\030\163\033\161\037\156" +
    "\040\164\041\165\042\170\044\166\045\167\046\157\047" +
    "\162\050\160\001\002\000\060\010\127\011\120\013\113" +
    "\014\107\016\101\017\105\020\130\021\114\023\146\024" +
    "\106\026\070\035\uffc3\036\075\053\102\056\131\057\126" +
    "\060\103\061\074\062\111\063\121\064\135\072\124\073" +
    "\136\001\002\000\076\004\uffbf\005\uffbf\010\uffbf\011\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\026\uffbf\027\uffbf\035\uffbf" +
    "\036\uffbf\053\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062" +
    "\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\072\uffbf\073\uffbf" +
    "\001\002\000\040\010\127\011\120\020\130\021\114\023" +
    "\146\024\106\036\075\053\102\060\103\061\074\062\111" +
    "\063\121\064\135\072\124\073\136\001\002\000\032\025" +
    "\273\030\163\033\161\037\156\040\164\041\165\042\170" +
    "\044\166\045\167\046\157\047\162\050\160\001\002\000" +
    "\040\025\uffa2\030\uffa2\031\uffa2\033\uffa2\034\uffa2\035\uffa2" +
    "\037\uffa2\040\uffa2\041\uffa2\042\uffa2\044\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\001\002\000\040\010\127\011\120" +
    "\020\130\021\114\023\146\024\106\036\075\053\102\060" +
    "\103\061\074\062\111\063\121\064\135\072\124\073\136" +
    "\001\002\000\032\025\276\030\163\033\161\037\156\040" +
    "\164\041\165\042\170\044\166\045\167\046\157\047\162" +
    "\050\160\001\002\000\060\010\127\011\120\013\113\014" +
    "\107\016\101\017\105\020\130\021\114\023\146\024\106" +
    "\026\070\035\uffc3\036\075\053\102\056\131\057\126\060" +
    "\103\061\074\062\111\063\121\064\135\072\124\073\136" +
    "\001\002\000\076\004\uffc0\005\uffc0\010\uffc0\011\uffc0\013" +
    "\uffc0\014\uffc0\015\300\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\026\uffc0\027\uffc0\035\uffc0\036" +
    "\uffc0\053\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0" +
    "\063\uffc0\064\uffc0\065\uffc0\066\uffc0\072\uffc0\073\uffc0\001" +
    "\002\000\060\010\127\011\120\013\113\014\107\016\101" +
    "\017\105\020\130\021\114\023\146\024\106\026\070\035" +
    "\uffc3\036\075\053\102\056\131\057\126\060\103\061\074" +
    "\062\111\063\121\064\135\072\124\073\136\001\002\000" +
    "\076\004\uffc2\005\uffc2\010\uffc2\011\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023" +
    "\uffc2\024\uffc2\026\uffc2\027\uffc2\035\uffc2\036\uffc2\053\uffc2" +
    "\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064" +
    "\uffc2\065\uffc2\066\uffc2\072\uffc2\073\uffc2\001\002\000\076" +
    "\004\uffc1\005\uffc1\010\uffc1\011\uffc1\013\uffc1\014\uffc1\015" +
    "\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\026\uffc1\027\uffc1\035\uffc1\036\uffc1\053\uffc1\056" +
    "\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1" +
    "\065\uffc1\066\uffc1\072\uffc1\073\uffc1\001\002\000\032\025" +
    "\304\030\163\033\161\037\156\040\164\041\165\042\170" +
    "\044\166\045\167\046\157\047\162\050\160\001\002\000" +
    "\040\025\uffb6\030\uffb6\031\uffb6\033\uffb6\034\uffb6\035\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\001\002\000\076\004\uffbb\005\uffbb" +
    "\010\uffbb\011\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\026\uffbb" +
    "\027\uffbb\035\uffbb\036\uffbb\053\uffbb\056\uffbb\057\uffbb\060" +
    "\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb" +
    "\072\uffbb\073\uffbb\001\002\000\004\025\307\001\002\000" +
    "\040\025\uffa4\030\uffa4\031\uffa4\033\uffa4\034\uffa4\035\uffa4" +
    "\037\uffa4\040\uffa4\041\uffa4\042\uffa4\044\uffa4\045\uffa4\046" +
    "\uffa4\047\uffa4\050\uffa4\001\002\000\040\025\uffb0\030\uffb0" +
    "\031\uffb0\033\uffb0\034\uffb0\035\uffb0\037\156\040\164\041" +
    "\165\042\170\044\166\045\167\046\157\047\162\050\uffb0" +
    "\001\002\000\004\035\uffbd\001\002\000\004\035\313\001" +
    "\002\000\076\004\uffbc\005\uffbc\010\uffbc\011\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022" +
    "\uffbc\023\uffbc\024\uffbc\026\uffbc\027\uffbc\035\uffbc\036\uffbc" +
    "\053\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\065\uffbc\066\uffbc\072\uffbc\073\uffbc\001\002" +
    "\000\040\025\uffa7\030\uffa7\031\uffa7\033\uffa7\034\uffa7\035" +
    "\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\044\uffa7\045\uffa7" +
    "\046\uffa7\047\uffa7\050\uffa7\001\002\000\004\025\316\001" +
    "\002\000\040\025\uffa3\030\uffa3\031\uffa3\033\uffa3\034\uffa3" +
    "\035\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\044\uffa3\045" +
    "\uffa3\046\uffa3\047\uffa3\050\uffa3\001\002\000\004\026\320" +
    "\001\002\000\020\004\uffd8\005\uffd8\022\uffd8\023\uffd8\027" +
    "\uffd8\065\uffd8\066\uffd8\001\002\000\020\004\324\005\015" +
    "\022\005\023\016\027\323\065\006\066\023\001\002\000" +
    "\006\023\327\032\054\001\002\000\026\002\uffda\003\uffda" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\022\uffda\023\uffda\065" +
    "\uffda\066\uffda\001\002\000\006\023\327\032\ufff1\001\002" +
    "\000\020\004\uffd9\005\uffd9\022\uffd9\023\uffd9\027\uffd9\065" +
    "\uffd9\066\uffd9\001\002\000\020\004\uffd6\005\uffd6\022\uffd6" +
    "\023\uffd6\027\uffd6\065\uffd6\066\uffd6\001\002\000\004\024" +
    "\330\001\002\000\020\004\uffe8\005\uffe8\022\uffe8\023\uffe8" +
    "\025\uffea\065\uffe8\066\uffe8\001\002\000\004\025\332\001" +
    "\002\000\004\035\333\001\002\000\020\004\uffd5\005\uffd5" +
    "\022\uffd5\023\uffd5\027\uffd5\065\uffd5\066\uffd5\001\002\000" +
    "\020\004\uffd7\005\uffd7\022\uffd7\023\uffd7\027\uffd7\065\uffd7" +
    "\066\uffd7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\004\002\003\001\001\000\022\003\006\005" +
    "\007\007\016\034\024\044\011\047\021\050\023\051\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\032\001" +
    "\001\000\004\030\033\001\001\000\004\031\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\045\001" +
    "\001\000\020\006\050\034\024\044\011\047\051\050\046" +
    "\051\020\055\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\055\001\001\000\002\001" +
    "\001\000\006\004\057\046\060\001\001\000\004\053\065" +
    "\001\001\000\006\044\061\051\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\070\001\001\000\004\056" +
    "\071\001\001\000\002\001\001\000\050\011\107\012\131" +
    "\013\111\014\103\015\076\016\072\017\136\020\077\021" +
    "\115\022\116\023\121\024\132\027\075\035\137\042\133" +
    "\043\124\044\061\050\122\051\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\021\313\022\116\023\121" +
    "\024\132\027\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\021\115\022\116\023\121" +
    "\024\132\027\075\035\310\001\001\000\014\021\307\022" +
    "\116\023\121\024\132\027\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\021\302\022" +
    "\116\023\121\024\132\027\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\011\107\012\131\013" +
    "\111\014\103\015\076\016\072\017\136\020\077\021\115" +
    "\022\116\023\121\024\132\027\075\035\137\042\133\043" +
    "\142\044\061\050\122\051\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\021\115\022\116\023\121\024\132\027\075\035" +
    "\144\001\001\000\002\001\001\000\004\062\146\001\001" +
    "\000\002\001\001\000\020\021\151\022\116\023\121\024" +
    "\132\026\150\027\075\045\152\001\001\000\004\063\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\021" +
    "\154\022\116\023\121\024\132\027\075\001\001\000\002" +
    "\001\001\000\014\021\223\022\116\023\121\024\132\027" +
    "\075\001\001\000\014\021\222\022\116\023\121\024\132" +
    "\027\075\001\001\000\014\021\221\022\116\023\121\024" +
    "\132\027\075\001\001\000\004\025\202\001\001\000\014" +
    "\021\177\022\116\023\121\024\132\027\075\001\001\000" +
    "\014\021\175\022\116\023\121\024\132\027\075\001\001" +
    "\000\014\021\174\022\116\023\121\024\132\027\075\001" +
    "\001\000\014\021\173\022\116\023\121\024\132\027\075" +
    "\001\001\000\014\021\172\022\116\023\121\024\132\027" +
    "\075\001\001\000\014\021\171\022\116\023\121\024\132" +
    "\027\075\001\001\000\014\021\170\022\116\023\121\024" +
    "\132\027\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\210\001\001\000" +
    "\004\041\205\001\001\000\020\021\151\022\116\023\121" +
    "\024\132\026\206\027\075\045\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\021\212\022\116\023\121\024\132\027\075\001" +
    "\001\000\002\001\001\000\014\021\214\022\116\023\121" +
    "\024\132\027\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\021\217\022\116\023\121\024\132\027\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\021\227\022\116\023\121\024" +
    "\132\027\075\001\001\000\002\001\001\000\016\021\115" +
    "\022\116\023\121\024\132\027\075\035\231\001\001\000" +
    "\002\001\001\000\036\011\107\012\233\013\111\014\103" +
    "\015\076\016\072\017\136\020\077\021\115\022\116\023" +
    "\121\024\132\027\075\035\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\021\151\022\116\023\121\024\132\027\075\045\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\021\246" +
    "\022\116\023\121\024\132\027\075\001\001\000\002\001" +
    "\001\000\014\021\256\022\116\023\121\024\132\027\075" +
    "\001\001\000\014\021\255\022\116\023\121\024\132\027" +
    "\075\001\001\000\014\021\254\022\116\023\121\024\132" +
    "\027\075\001\001\000\014\021\253\022\116\023\121\024" +
    "\132\027\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\021\260\022" +
    "\116\023\121\024\132\027\075\001\001\000\002\001\001" +
    "\000\004\044\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\021\265\022\116\023\121\024\132\027\075" +
    "\001\001\000\002\001\001\000\036\011\107\012\267\013" +
    "\111\014\103\015\076\016\072\017\136\020\077\021\115" +
    "\022\116\023\121\024\132\027\075\035\137\001\001\000" +
    "\002\001\001\000\014\021\271\022\116\023\121\024\132" +
    "\027\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\021\274\022\116\023\121\024\132\027\075\001\001" +
    "\000\002\001\001\000\036\011\107\012\276\013\111\014" +
    "\103\015\076\016\072\017\136\020\077\021\115\022\116" +
    "\023\121\024\132\027\075\035\137\001\001\000\004\036" +
    "\300\001\001\000\036\011\107\012\301\013\111\014\103" +
    "\015\076\016\072\017\136\020\077\021\115\022\116\023" +
    "\121\024\132\027\075\035\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\311\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\320\001\001\000" +
    "\006\010\324\044\321\001\001\000\004\033\333\001\001" +
    "\000\002\001\001\000\004\033\325\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\330" +
    "\046\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



       //Metodo al que se llama automaticamente ante algun error sintactico
static boolean error = false;
public static int errors = 0;

    public void syntax_error(Symbol s)
    {        
        String lexema = String.valueOf(s.value);
        int fila = s.right;
        int columna = s.left;
        error = true;
        System.out.println("Se ha encontrado un error sintactico recuperable, leer: ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tLinea: "+fila);
        System.out.println("\t\tColumna: "+columna);


       
        
    }


  public void sem_error(String lexeme, String message) {
	errors++;
     	//System.err.println("Error "+ s.current_lexeme() + " : Semantic error");
      System.err.println("  "+ errors + "==> " + message + ": "+ lexeme + "\n");
  }
    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = String.valueOf(s.value);;
        int fila = s.right;
        int columna = s.left;
        error = true;
        System.out.println("Se ha encontrado un error sintactico irrecuperable, leer: ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tLinea: "+fila);
        System.out.println("\t\tColumna: "+columna);

     
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Constant ::= znull 
            {
              Object RESULT =null;
		RESULT = "&null";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Constant ::= zconst_string 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a+ "&str";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Constant ::= cbool 
            {
              Object RESULT =null;
		RESULT = "&bool";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Constant ::= zconstante_double 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a + "&dob";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Constant ::= zconst_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a + "&int";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constant",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Actuals",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Actuals ::= ExprPrint 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println(n); RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Actuals",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LibCall ::= zsetbyte para Expr coma Expr parac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LibCall",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LibCall ::= zgetbyte para Expr parac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LibCall",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CallCont ::= para Actuals parac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CallCont",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Call ::= Expr punto LibCall CallCont 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Call ::= Expr punto id CallCont 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Call ::= id NT$8 para Actuals NT$9 parac 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Call",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
Env.tipos(n,n1.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$8 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
if(!Env.get_name(n, "m")){parser.sem_error(n, "***WARNING*** ==> Método: " + n + " no ha sido declarado");}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LValue ::= Expr coa Expr coc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LValue",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LValue ::= Expr punto id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LValue",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LValue ::= id 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(!Env.get_name(n,"v")){System.err.println("***WARNING*** ==> Variable: "+n+" no ha sido declarada");} RESULT = n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LValue",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr1 ::= id 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr1",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr1 ::= Constant 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr1",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= Call 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= zthis 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= LValue 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= Constant 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = m;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= zmalloc para Expr parac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= zreadline para parac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= zreadinteger para parac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= zNewArray para Expr coma Type parac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= zNew para id parac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= admira Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr pipes Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr andpers Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr negar Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr dobleigual Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr maigual Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr mayor Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr meigual Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr menor Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= guin Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr porcentaje Expr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr1 slash Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = e1 + "/" + e2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr1 aster Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = e1 + "*" + e2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr1 guin Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = e1 + "-" + e2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr1 mas Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = e1 + "+" + e2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= para Expr parac 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = p;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= LValue igual Expr 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    Env.Validar(v.toString(), e.toString());

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ExprPrint ::= Expr 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExprPrint",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ExprPrint ::= ExprPrint coma Expr 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a = a.concat(","+b.toString()); RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ExprPrint",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PrintStmt ::= zprint para ExprPrint parac pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PrintStmt",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BreakStmt ::= zbreak pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BreakStmt",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ReturnStmt ::= zreturn StmtExpr NT$7 pyc 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ReturnStmt",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$7 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
RESULT = p;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ForStmt ::= zfor para StmtExpr pyc Expr pyc StmtExpr parac Stmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ForStmt",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // WhileStmt ::= zwhile para Expr parac Stmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WhileStmt",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ElseIfStmt ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ElseIfStmt",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ElseIfStmt ::= zelse Stmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ElseIfStmt",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IfStmt ::= zif para Expr parac Stmt ElseIfStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IfStmt",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // StmtExpr ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtExpr",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // StmtExpr ::= Expr 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtExpr",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = p;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stmt ::= StmtExpr NT$6 pyc 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Stmt",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$6 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
RESULT=m;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // StmtEnd ::= Stmt 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = p;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtEnd",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // StmtEnd ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtEnd",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // StmtCont ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtCont",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // StmtCont ::= StmtEnd StmtCont 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(p!=null){if(q==null){q="";q = q.toString().concat(p.toString());}else {q = q.toString().concat(p.toString());}}; RESULT = q; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtCont",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // StmtBlock ::= lla NT$4 StmtCont NT$5 llc 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("StmtBlock",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
RESULT=p;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$4 ::= 
            {
              Object RESULT =null;
System.out.print(" BLOCK ENTRY"); Env.push(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ProtCont ::= id para Formals parac pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ProtCont",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Prototype ::= zvoid ProtCont 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prototype",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Prototype ::= Type ProtCont 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Prototype",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // InterfaceProt ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("InterfaceProt",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // InterfaceProt ::= InterfaceProt Prototype 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("InterfaceProt",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // InterfaceDecl ::= zinterface id lla InterfaceProt llc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Field ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Field",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Field ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Field",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassField ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ClassField",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassField ::= ClassField Field 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ClassField",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ImpID ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ImpID",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ImpID ::= ImpID coma id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ImpID",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Imp ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Imp",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Imp ::= zimplements ImpID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Imp",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Ext ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ext",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Ext ::= zextends id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ext",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDecl ::= zclass id NT$2 Ext Imp lla ClassField NT$3 llc 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ClassDecl",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
 	System.out.println("CLASS EXIT: "+n1);
			 Env.pop();
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$2 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
	
			if (Env.putClass(n1, null, null) != 0) parser.sem_error(n1,"NOMBRE DE CLASE DUPLICADO");
 			
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FormalsCont ::= 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FormalsCont",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FormalsCont ::= FormalsCont Variable coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		if(a==null){a="";}; a = a.concat(b+"-"); RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FormalsCont",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Formals ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Formals",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Formals ::= FormalsCont Variable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(a==null){a="";a = a.concat(b);}else{a = a.concat(b);} RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Formals",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FuncCont ::= Type id NT$0 para Formals NT$1 parac StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Env.mreturn(t,v);System.out.print(" BLOCK EXIT"); Env.pop();System.out.print(" METHOD EXIT" +n); Env.pop();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncCont",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
Env.parametros(n,p);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
t_simbolo var = new t_simbolo("", t, "m"); if(!Env.put(n.toString(), var)) {System.out.println("Nombre de metodo ya existe");} else {System.out.print(" METHOD ENTRY: "+n); Env.push();}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FunctionDecl ::= FuncCont 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunctionDecl",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= Type corcetes 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= zvoid 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= id 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= zstring 
            {
              String RESULT =null;
		RESULT = "STR";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= zbool 
            {
              String RESULT =null;
		RESULT = "BOOL";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= zdouble 
            {
              String RESULT =null;
		RESULT = "DOB";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= zint 
            {
              String RESULT =null;
		RESULT = "INT";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Type",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Variable ::= Type id 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = ""; RESULT=RESULT.concat("["+n+","+t+"]");t_simbolo var = new t_simbolo("",t,"v"); if(!Env.put(n,var )){System.out.println("***WARNING*** ==> La variable: "+n+" ya existe");}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VariableDecl ::= Variable pyc 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VariableDecl",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= error llc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= error pyc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Program Decl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

